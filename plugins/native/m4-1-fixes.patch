This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tony Theodore <tonyt@logyst.com>
Date: Fri, 28 Jun 2019 18:34:23 +1000
Subject: [PATCH 1/2] fix darwin build

see:
https://github.com/macports/macports-ports/commit/edf0ee1e2cfa884c73089e7ca32e7009f071dbd0

diff --git a/lib/vasnprintf.c b/lib/vasnprintf.c
index 1111111..2222222 100644
--- a/lib/vasnprintf.c
+++ b/lib/vasnprintf.c
@@ -4858,7 +4858,7 @@ VASNPRINTF (DCHAR_T *resultbuf, size_t *lengthp,
 #endif
                   *fbp = dp->conversion;
 #if USE_SNPRINTF
-# if !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))
+# if !defined(__APPLE__) && !(((__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3)) && !defined __UCLIBC__) || ((defined _WIN32 || defined __WIN32__) && ! defined __CYGWIN__))
                 fbp[1] = '%';
                 fbp[2] = 'n';
                 fbp[3] = '\0';

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Patrick Lavigne <me@patrick.codes>
Date: Thu, 21 Mar 2024 12:42:11 -0400
Subject: [PATCH 2/2] Fix compile error when using clang

CLang issues an error when you attempt to pass a _Noreturn function to a
function pointer marked with __attribute_noreturn__, whereas GCC only
issues a warning. As far as I can tell this doesn't actually affect
anything under the hood, and there's multiple other projects that
already apply this patch when using clang (like Gentoo). For more
information here's a thread on the GNU mailing list about the issue:

https://lists.gnu.org/archive/html/bug-gnulib/2017-04/msg00104.html

diff --git a/lib/obstack.c b/lib/obstack.c
index 1111111..2222222 100644
--- a/lib/obstack.c
+++ b/lib/obstack.c
@@ -326,7 +326,7 @@ int obstack_exit_failure = EXIT_FAILURE;
 #   include <libio/iolibio.h>
 #  endif
 
-static _Noreturn void
+static __attribute_noreturn__ void
 print_and_abort (void)
 {
   /* Don't change any of these strings.  Yes, it would be possible to add
