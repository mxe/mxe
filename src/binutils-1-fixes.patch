This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Stephen Kitt <skitt@debian.org>
Date: Sat, 15 Jul 2017 00:09:40 +1000
Subject: [PATCH 1/1] Allow the PE timestamp to be specified with
 SOURCE_DATE_EPOCH

Taken from:
https://sources.debian.net/patches/binutils-mingw-w64/7.4/specify-timestamp.patch/

diff --git a/bfd/peXXigen.c b/bfd/peXXigen.c
index 1111111..2222222 100644
--- a/bfd/peXXigen.c
+++ b/bfd/peXXigen.c
@@ -77,6 +77,9 @@
 #include <wctype.h>
 #endif
 
+#include <errno.h>
+#include <limits.h>
+
 /* NOTE: it's strange to be including an architecture specific header
    in what's supposed to be general (to PE/PEI) code.  However, that's
    where the definitions are, and they don't vary per architecture
@@ -856,7 +859,36 @@ _bfd_XXi_only_swap_filehdr_out (bfd * abfd, void * in, void * out)
   /* Use a real timestamp by default, unless the no-insert-timestamp
      option was chosen.  */
   if ((pe_data (abfd)->timestamp) == -1)
-    H_PUT_32 (abfd, time (0), filehdr_out->f_timdat);
+    {
+      time_t now;
+      char *source_date_epoch;
+      unsigned long long epoch;
+      char *endptr;
+
+      now = time (0);
+      source_date_epoch = getenv("SOURCE_DATE_EPOCH");
+      if (source_date_epoch) {
+        errno = 0;
+        epoch = strtoull(source_date_epoch, &endptr, 10);
+        if ((errno == ERANGE && (epoch == ULLONG_MAX || epoch == 0))
+            || (errno != 0 && epoch == 0)) {
+          _bfd_error_handler("Environment variable $SOURCE_DATE_EPOCH: strtoull: %s\n",
+                             strerror(errno));
+        } else if (endptr == source_date_epoch) {
+          _bfd_error_handler("Environment variable $SOURCE_DATE_EPOCH: No digits were found: %s\n",
+                             endptr);
+        } else if (*endptr != '\0') {
+          _bfd_error_handler("Environment variable $SOURCE_DATE_EPOCH: Trailing garbage: %s\n",
+                             endptr);
+        } else if (epoch > ULONG_MAX) {
+          _bfd_error_handler("Environment variable $SOURCE_DATE_EPOCH: value must be smaller than or equal to: %lu but was found to be: %llu\n",
+                             ULONG_MAX, epoch);
+        } else {
+          now = epoch;
+        }
+      }
+      H_PUT_32 (abfd, now, filehdr_out->f_timdat);
+    }
   else
     H_PUT_32 (abfd, pe_data (abfd)->timestamp, filehdr_out->f_timdat);
 
diff --git a/ld/emultempl/pe.em b/ld/emultempl/pe.em
index 1111111..2222222 100644
--- a/ld/emultempl/pe.em
+++ b/ld/emultempl/pe.em
@@ -318,7 +318,7 @@ gld${EMULATION_NAME}_add_options
      OPTION_USE_NUL_PREFIXED_IMPORT_TABLES},
     {"no-leading-underscore", no_argument, NULL, OPTION_NO_LEADING_UNDERSCORE},
     {"leading-underscore", no_argument, NULL, OPTION_LEADING_UNDERSCORE},
-    {"insert-timestamp", no_argument, NULL, OPTION_INSERT_TIMESTAMP},
+    {"insert-timestamp", optional_argument, NULL, OPTION_INSERT_TIMESTAMP},
     {"no-insert-timestamp", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},
 #ifdef DLL_SUPPORT
     /* getopt allows abbreviations, so we do this to stop it
diff --git a/ld/emultempl/pep.em b/ld/emultempl/pep.em
index 1111111..2222222 100644
--- a/ld/emultempl/pep.em
+++ b/ld/emultempl/pep.em
@@ -337,7 +337,7 @@ gld${EMULATION_NAME}_add_options
     {"no-bind", no_argument, NULL, OPTION_NO_BIND},
     {"wdmdriver", no_argument, NULL, OPTION_WDM_DRIVER},
     {"tsaware", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},
-    {"insert-timestamp", no_argument, NULL, OPTION_INSERT_TIMESTAMP},
+    {"insert-timestamp", optional_argument, NULL, OPTION_INSERT_TIMESTAMP},
     {"no-insert-timestamp", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},
     {"build-id", optional_argument, NULL, OPTION_BUILD_ID},
     {"enable-reloc-section", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},
diff --git a/ld/pe-dll.c b/ld/pe-dll.c
index 1111111..2222222 100644
--- a/ld/pe-dll.c
+++ b/ld/pe-dll.c
@@ -27,6 +27,8 @@
 #include "safe-ctype.h"
 #include "ctf-api.h"
 
+#include <errno.h>
+#include <limits.h>
 #include <time.h>
 
 #include "ld.h"
@@ -1220,7 +1222,36 @@ fill_edata (bfd *abfd, struct bfd_link_info *info ATTRIBUTE_UNUSED)
   memset (edata_d, 0, edata_sz);
 
   if (pe_data (abfd)->timestamp == -1)
-    H_PUT_32 (abfd, time (0), edata_d + 4);
+    {
+      time_t now;
+      char *source_date_epoch;
+      unsigned long long epoch;
+      char *endptr;
+
+      now = time(0);
+      source_date_epoch = getenv("SOURCE_DATE_EPOCH");
+      if (source_date_epoch) {
+        errno = 0;
+        epoch = strtoull(source_date_epoch, &endptr, 10);
+        if ((errno == ERANGE && (epoch == ULLONG_MAX || epoch == 0))
+           || (errno != 0 && epoch == 0)) {
+         einfo("Environment variable $SOURCE_DATE_EPOCH: strtoull: %s\n",
+               strerror(errno));
+        } else if (endptr == source_date_epoch) {
+         einfo("Environment variable $SOURCE_DATE_EPOCH: No digits were found: %s\n",
+               endptr);
+        } else if (*endptr != '\0') {
+         einfo("Environment variable $SOURCE_DATE_EPOCH: Trailing garbage: %s\n",
+               endptr);
+        } else if (epoch > ULONG_MAX) {
+         einfo("Environment variable $SOURCE_DATE_EPOCH: value must be smaller than or equal to: %lu but was found to be: %llu\n",
+               ULONG_MAX, epoch);
+        } else {
+         now = epoch;
+        }
+      }
+      H_PUT_32 (abfd, now, edata_d + 4);
+    }
   else
     H_PUT_32 (abfd, pe_data (abfd)->timestamp, edata_d + 4);
 
