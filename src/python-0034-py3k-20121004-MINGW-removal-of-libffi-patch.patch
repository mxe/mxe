diff -urN a-3.3.0/Lib/ctypes/test/test_as_parameter.py b-3.3.0/Lib/ctypes/test/test_as_parameter.py
--- a-3.3.0/Lib/ctypes/test/test_as_parameter.py	Fri Nov 16 22:55:53 2012
+++ b-3.3.0/Lib/ctypes/test/test_as_parameter.py	Fri Nov 16 23:20:49 2012
@@ -1,7 +1,6 @@
 import unittest
 from ctypes import *
 import _ctypes_test
-import sys
 
 dll = CDLL(_ctypes_test.__file__)
 
@@ -172,10 +171,6 @@
         s2h = dll.ret_2h_func(self.wrap(inp))
         self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
 
-    # This is known cdecl incompatibility between GCC
-    # and MSVC. It is addressed in GCC issue #36834.
-    # Python libffi detect it and complain.
-    @unittest.skipIf(sys.platform == "win32" and sys.version.find("GCC") >= 0, 'XFAIL GCC(mingw)')
     def test_struct_return_8H(self):
         class S8I(Structure):
             _fields_ = [("a", c_int),
diff -urN a-3.3.0/Lib/ctypes/test/test_functions.py b-3.3.0/Lib/ctypes/test/test_functions.py
--- a-3.3.0/Lib/ctypes/test/test_functions.py	Fri Nov 16 22:55:53 2012
+++ b-3.3.0/Lib/ctypes/test/test_functions.py	Fri Nov 16 23:21:17 2012
@@ -359,10 +359,6 @@
             s2h = windll.s_ret_2h_func(S2H(99, 88))
             self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
 
-    # This is known cdecl incompatibility between GCC
-    # and MSVC. It is addressed in GCC issue #36834.
-    # Python libffi detect it and complain.
-    @unittest.skipIf(sys.platform == "win32" and sys.version.find("GCC") >= 0, 'XFAIL GCC(mingw)')
     def test_struct_return_8H(self):
         class S8I(Structure):
             _fields_ = [("a", c_int),
diff -urN a-3.3.0/Modules/_ctypes/libffi_msvc/win32.S b-3.3.0/Modules/_ctypes/libffi_msvc/win32.S
--- a-3.3.0/Modules/_ctypes/libffi_msvc/win32.S	Fri Nov 16 22:55:53 2012
+++ b-3.3.0/Modules/_ctypes/libffi_msvc/win32.S	Thu Jan  1 00:00:00 1970
@@ -1,154 +0,0 @@
-/* -----------------------------------------------------------------------
-   win32.S - Copyright (c) 1996, 1998, 2001, 2002  Red Hat, Inc.
-	     Copyright (c) 2001  John Beniton
-	     Copyright (c) 2002  Ranjit Mathew
-			
- 
-   X86 Foreign Function Interface
- 
-   Permission is hereby granted, free of charge, to any person obtaining
-   a copy of this software and associated documentation files (the
-   ``Software''), to deal in the Software without restriction, including
-   without limitation the rights to use, copy, modify, merge, publish,
-   distribute, sublicense, and/or sell copies of the Software, and to
-   permit persons to whom the Software is furnished to do so, subject to
-   the following conditions:
- 
-   The above copyright notice and this permission notice shall be included
-   in all copies or substantial portions of the Software.
- 
-   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
-   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
-   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
-   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
-   OTHER DEALINGS IN THE SOFTWARE.
-   ----------------------------------------------------------------------- */
- 
-#define LIBFFI_ASM
-#include <fficonfig.h>
-#include <ffi.h>
- 
-.text
- 
-.globl ffi_prep_args
- 
-        # This assumes we are using gas.
-        .balign 16
-.globl _ffi_call_x86
- 
-_ffi_call_x86:
-        pushl %ebp
-        movl  %esp,%ebp
-
-	#THe: save previous %esi, and store the current stack pointer in %esi
-	pushl %esi
-	movl %esp,%esi
-
-        # Make room for all of the new args.
-        movl  16(%ebp),%ecx                                                     
-        subl  %ecx,%esp
- 
-        movl  %esp,%eax
- 
-        # Place all of the ffi_prep_args in position
-        pushl 12(%ebp)
-        pushl %eax
-        call  *8(%ebp)
- 
-        # Return stack to previous state and call the function
-        addl  $8,%esp
- 
-        # FIXME: Align the stack to a 128-bit boundary to avoid
-        # potential performance hits.
-
-	call  *28(%ebp)
- 
-	# Load ecif->cif->abi
-#masm#	mov ecx, [ebp + 12]
-        movl  12(%ebp),%ecx
-#masm#	mov ecx, [ecx]ecif.cif
-	movl  (%ecx),%ecx
-#masm#	mov ecx, [ecx]ecif.cif.abi
-	movl  (%ecx),%ecx
-#masm#	cmp ecx, FFI_STDCALL
-        cmpl  $2,%ecx
-        je   noclean
-
-	# STDCALL: Remove the space we pushed for the args
-        movl  16(%ebp),%ecx
-        addl  %ecx,%esp
-
-	# CDECL: Caller has already cleaned the stack
-noclean:
-	# Check that esp has the same value as before!
-	sub %esp,%esi # calculate stack pointer difference
-
-        # Load %ecx with the return type code
-        movl  20(%ebp),%ecx
- 
-        # If the return value pointer is NULL, assume no return value.
-        cmpl  $0,24(%ebp)
-        jne   retint
- 
-        # Even if there is no space for the return value, we are
-        # obliged to handle floating-point values.
-        cmpl  $FFI_TYPE_FLOAT,%ecx
-        jne   noretval
-        fstp  %st(0)
- 
-        jmp   epilogue
- 
-retint:
-        cmpl  $FFI_TYPE_INT,%ecx
-        jne   retfloat
-        # Load %ecx with the pointer to storage for the return value
-        movl  24(%ebp),%ecx
-        movl  %eax,0(%ecx)
-        jmp   epilogue
- 
-retfloat:
-        cmpl  $FFI_TYPE_FLOAT,%ecx
-        jne   retdouble   
-         # Load %ecx with the pointer to storage for the return value
-        movl  24(%ebp),%ecx
-        fstps (%ecx)
-        jmp   epilogue
- 
-retdouble:
-        cmpl  $FFI_TYPE_DOUBLE,%ecx
-        jne   retlongdouble
-        # Load %ecx with the pointer to storage for the return value
-        movl  24(%ebp),%ecx
-        fstpl (%ecx)
-        jmp   epilogue
- 
-retlongdouble:
-        cmpl  $FFI_TYPE_LONGDOUBLE,%ecx
-        jne   retint64
-        # Load %ecx with the pointer to storage for the return value
-        movl  24(%ebp),%ecx
-        fstpt (%ecx)
-        jmp   epilogue
- 
-retint64:
-        cmpl  $FFI_TYPE_SINT64,%ecx
-        jne   retstruct
-        # Load %ecx with the pointer to storage for the return value
-        movl  24(%ebp),%ecx
-        movl  %eax,0(%ecx)
-        movl  %edx,4(%ecx)
- 
-retstruct:
-        # Nothing to do!
- 
-noretval:
-epilogue:
-	movl %esi,%eax # return the stack pointer detlta in %eax
-	popl %esi # restore previous %esi
-        movl %ebp,%esp
-        popl %ebp
-        ret
- 
-.ffi_call_x86_end:
diff -urN a-3.3.0/setup.py b-3.3.0/setup.py
--- a-3.3.0/setup.py	Fri Nov 16 23:10:10 2012
+++ b-3.3.0/setup.py	Fri Nov 16 23:26:44 2012
@@ -1903,38 +1903,6 @@
         return True
 
     def configure_ctypes(self, ext):
-        if host_platform in ['mingw', 'win32']:
-            # win32 platform use own sources and includes
-            # from Modules/_ctypes/libffi_msvc/
-            srcdir = sysconfig.get_config_var('srcdir')
-
-            ffi_srcdir = os.path.abspath(os.path.join(srcdir, 'Modules',
-                                         '_ctypes'))
-            sources = [os.path.join(ffi_srcdir, p)
-                for p in ['malloc_closure.c',
-                         ]]
-            ext.sources.extend(sources)
-
-            ffi_srcdir = os.path.abspath(os.path.join(srcdir, 'Modules',
-                                         '_ctypes', 'libffi_msvc'))
-            #FIXME: _ctypes/libffi_msvc/win64.asm ?
-            sources = [os.path.join(ffi_srcdir, p)
-                for p in ['ffi.c',
-                          'prep_cif.c',
-                          'win32.S',
-                         ]]
-            # NOTE: issue2942 don't resolve problem with assembler code.
-            # It seems to me that python refuse to build an extension
-            # if exist a source with unknown suffix.
-            self.compiler.src_extensions.append('.s')
-            self.compiler.src_extensions.append('.S')
-            ext.include_dirs.append(ffi_srcdir)
-            ext.sources.extend(sources)
-            ext.libraries.extend(['ole32', 'oleaut32', 'uuid'])
-            #AdditionalOptions="/EXPORT:DllGetClassObject,PRIVATE /EXPORT:DllCanUnloadNow,PRIVATE"
-            ext.export_symbols.extend(['DllGetClassObject PRIVATE',
-                                       'DllCanUnloadNow PRIVATE'])
-            return True
         if not self.use_system_libffi:
             if host_platform == 'darwin':
                 return self.configure_ctypes_darwin(ext)
@@ -1983,11 +1951,6 @@
                                fficonfig['ffi_sources'])
             ext.include_dirs.extend(include_dirs)
             ext.extra_compile_args.extend(extra_compile_args)
-            if host_platform in ['mingw', 'win32']:
-                ext.libraries.extend(['ole32', 'oleaut32', 'uuid'])
-                #AdditionalOptions="/EXPORT:DllGetClassObject,PRIVATE /EXPORT:DllCanUnloadNow,PRIVATE"
-                ext.export_symbols.extend(['DllGetClassObject PRIVATE',
-                                           'DllCanUnloadNow PRIVATE'])
         return True
 
     def detect_ctypes(self, inc_dirs, lib_dirs):
