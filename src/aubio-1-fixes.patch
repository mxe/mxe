This file is part of MXE.
See index.html for further information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Timothy Gu <timothygu99@gmail.com>
Date: Fri, 14 Nov 2014 16:37:52 -0500
Subject: [PATCH] Add options for enabling shared and/or static libraries


diff --git a/src/wscript_build b/src/wscript_build
index 1111111..2222222 100644
--- a/src/wscript_build
+++ b/src/wscript_build
@@ -18,13 +18,11 @@ ctx(features = 'c',
         lib = 'm',
         target = 'lib_objects')
 
-# build libaubio.so (cshlib) and/or libaubio.a (cstlib)
-if ctx.env['DEST_OS'] in ['ios', 'iosimulator']:
-    build_features = ['cstlib']
-elif ctx.env['DEST_OS'] in ['win32', 'win64']:
-    build_features = ['cshlib']
-else: #linux, darwin, android, mingw, ...
-    build_features = ['cshlib', 'cstlib']
+build_features = []
+if ctx.options.enable_shared:
+    build_features += ['cshlib']
+if ctx.options.enable_static:
+    build_features += ['cstlib']
 
 for target in build_features:
     ctx(features = 'c ' + target,
diff --git a/wscript b/wscript
index 1111111..2222222 100644
--- a/wscript
+++ b/wscript
@@ -72,6 +72,12 @@ def options(ctx):
     add_option_enable_disable(ctx, 'double', default = False,
             help_str = 'compile in double precision mode',
             help_disable_str = 'compile in single precision mode (default)')
+    add_option_enable_disable(ctx, 'shared', default = True,
+            help_str = 'compile shared libraries (defaut)',
+            help_disable_str = 'do not compile shared library')
+    add_option_enable_disable(ctx, 'static', default = True,
+            help_str = 'compile static libraries (default)',
+            help_disable_str = 'do not compile static library')
     add_option_enable_disable(ctx, 'fat', default = False,
             help_str = 'build fat binaries (darwin only)',
             help_disable_str = 'do not build fat binaries (default)')

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Timothy Gu <timothygu99@gmail.com>
Date: Fri, 14 Nov 2014 16:39:51 -0500
Subject: [PATCH] fftw3 support requires -pthread


diff --git a/wscript b/wscript
index 1111111..2222222 100644
--- a/wscript
+++ b/wscript
@@ -200,8 +200,10 @@ def configure(ctx):
     # fftw not enabled, use vDSP or ooura
     if 'HAVE_FFTW3F' in ctx.env.define_key:
         ctx.msg('Checking for FFT implementation', 'fftw3f')
+        ctx.env.LINKFLAGS += ['-pthread']
     elif 'HAVE_FFTW3' in ctx.env.define_key:
         ctx.msg('Checking for FFT implementation', 'fftw3')
+        ctx.env.LINKFLAGS += ['-pthread']
     elif 'HAVE_ACCELERATE' in ctx.env.define_key:
         ctx.msg('Checking for FFT implementation', 'vDSP')
     else:

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Timothy Gu <timothygu99@gmail.com>
Date: Fri, 14 Nov 2014 16:40:53 -0500
Subject: [PATCH] Add static deps to pkgconfig file


diff --git a/aubio.pc.in b/aubio.pc.in
index 1111111..2222222 100644
--- a/aubio.pc.in
+++ b/aubio.pc.in
@@ -6,5 +6,7 @@ includedir=@includedir@
 Name: aubio
 Description: a library for audio labelling
 Version: @VERSION@
+Requires.private: @PCREQUIRES@
 Libs: -L${libdir} -laubio
+Libs.private: @PCLIBS@
 Cflags: -I${includedir} 
diff --git a/wscript b/wscript
index 1111111..2222222 100644
--- a/wscript
+++ b/wscript
@@ -179,6 +179,8 @@ def configure(ctx):
     if (ctx.options.enable_complex == True):
         ctx.check(header_name='complex.h')
 
+    pcrequires = []
+    pclibs = []
     # check for fftw3
     if (ctx.options.enable_fftw3 != False or ctx.options.enable_fftw3f != False):
         # one of fftwf or fftw3f
@@ -200,9 +202,13 @@ def configure(ctx):
     # fftw not enabled, use vDSP or ooura
     if 'HAVE_FFTW3F' in ctx.env.define_key:
         ctx.msg('Checking for FFT implementation', 'fftw3f')
+        pcrequires += ['fftw3f >= 3.0.0']
+        pclibs += ['-lpthread']
         ctx.env.LINKFLAGS += ['-pthread']
     elif 'HAVE_FFTW3' in ctx.env.define_key:
         ctx.msg('Checking for FFT implementation', 'fftw3')
+        pcrequires += ['fftw3 >= 3.0.0']
+        pclibs += ['-lpthread']
         ctx.env.LINKFLAGS += ['-pthread']
     elif 'HAVE_ACCELERATE' in ctx.env.define_key:
         ctx.msg('Checking for FFT implementation', 'vDSP')
@@ -213,16 +219,22 @@ def configure(ctx):
     if (ctx.options.enable_sndfile != False):
         ctx.check_cfg(package = 'sndfile', atleast_version = '1.0.4',
                 args = '--cflags --libs', mandatory = False)
+    if 'HAVE_SNDFILE' in ctx.env.define_key:
+        pcrequires += ['sndfile >= 1.0.4']
 
     # check for libsamplerate
     if (ctx.options.enable_samplerate != False):
         ctx.check_cfg(package = 'samplerate', atleast_version = '0.0.15',
                 args = '--cflags --libs', mandatory = False)
+    if 'HAVE_SAMPLERATE' in ctx.env.define_key:
+        pcrequires += ['samplerate >= 0.0.15']
 
     # check for jack
     if (ctx.options.enable_jack != False):
         ctx.check_cfg(package = 'jack',
                 args = '--cflags --libs', mandatory = False)
+    if 'HAVE_JACK' in ctx.env.define_key:
+        pcrequires += ['jack']
 
     # check for libav
     if (ctx.options.enable_avcodec != False):
@@ -238,9 +250,13 @@ def configure(ctx):
                 for i in ['AVCODEC', 'AVFORMAT', 'AVUTIL', 'AVRESAMPLE'] ):
             ctx.define('HAVE_LIBAV', 1)
             ctx.msg('Checking for all libav libraries', 'yes')
+            pcrequires += ['libavcodec >= 54.35.0', 'libavformat >= 52.3.0',
+                           'libavutil >= 52.3.0', 'libavresample >= 1.0.1']
         else:
             ctx.msg('Checking for all libav libraries', 'not found', color = 'YELLOW')
 
+    ctx.env.PCREQUIRES = ', '.join(pcrequires)
+    ctx.env.PCLIBS = ', '.join(pclibs)
     ctx.define('HAVE_WAVREAD', 1)
     ctx.define('HAVE_WAVWRITE', 1)
 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Timothy Gu <timothygu99@gmail.com>
Date: Fri, 14 Nov 2014 16:45:04 -0500
Subject: [PATCH] disable tests and examples


diff --git a/wscript b/wscript
index 1111111..2222222 100644
--- a/wscript
+++ b/wscript
@@ -293,9 +293,9 @@ def build(bld):
     bld.recurse('src')
     if bld.env['DEST_OS'] not in ['ios', 'iosimulator']:
         pass
-    if bld.env['DEST_OS'] not in ['ios', 'iosimulator', 'android']:
-        bld.recurse('examples')
-        bld.recurse('tests')
+    #if bld.env['DEST_OS'] not in ['ios', 'iosimulator', 'android']:
+        #bld.recurse('examples')
+        #bld.recurse('tests')
 
     bld( source = 'aubio.pc.in' )
 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boris Nagaev <bnagaev@gmail.com>
Date: Sat, 2 Jan 2016 22:16:34 +0300
Subject: [PATCH] use Python 3 style of except with argument

See https://github.com/mxe/mxe/issues/1108#issuecomment-168340558

diff --git a/python/tests/test_mathutils.py b/python/tests/test_mathutils.py
index 1111111..2222222 100755
--- a/python/tests/test_mathutils.py
+++ b/python/tests/test_mathutils.py
@@ -29,7 +29,7 @@ class aubio_mathutils(TestCase):
 
         try:
             print unwrap2pi(["23.","24.",25.])
-        except Exception, e:
+        except Exception as e:
             pass
 
     def test_unwrap2pi_takes_fvec(self):
diff --git a/python/tests/test_musicutils.py b/python/tests/test_musicutils.py
index 1111111..2222222 100755
--- a/python/tests/test_musicutils.py
+++ b/python/tests/test_musicutils.py
@@ -17,7 +17,7 @@ class aubio_window(TestCase):
     def test_fail_name_not_string(self):
         try:
             window(10, 1024)
-        except ValueError, e:
+        except ValueError as e:
             pass
         else:
             self.fail('non-string window type does not raise a ValueError')
@@ -25,7 +25,7 @@ class aubio_window(TestCase):
     def test_fail_size_not_int(self):
         try:
             window("default", "default")
-        except ValueError, e:
+        except ValueError as e:
             pass
         else:
             self.fail('non-integer window length does not raise a ValueError')
@@ -43,7 +43,7 @@ class aubio_level_lin(TestCase):
     def test_fail_not_fvec(self):
         try:
             level_lin("default")
-        except ValueError, e:
+        except ValueError as e:
             pass
         else:
             self.fail('non-number input phase does not raise a TypeError')
@@ -62,7 +62,7 @@ class aubio_db_spl(TestCase):
     def test_fail_not_fvec(self):
         try:
             db_spl("default")
-        except ValueError, e:
+        except ValueError as e:
             pass
         else:
             self.fail('non-number input phase does not raise a TypeError')
@@ -82,7 +82,7 @@ class aubio_silence_detection(TestCase):
     def test_fail_not_fvec(self):
         try:
             silence_detection("default", -70)
-        except ValueError, e:
+        except ValueError as e:
             pass
         else:
             self.fail('non-number input phase does not raise a TypeError')
@@ -102,7 +102,7 @@ class aubio_level_detection(TestCase):
     def test_fail_not_fvec(self):
         try:
             level_detection("default", -70)
-        except ValueError, e:
+        except ValueError as e:
             pass
         else:
             self.fail('non-number input phase does not raise a TypeError')
diff --git a/python/tests/test_source.py b/python/tests/test_source.py
index 1111111..2222222 100755
--- a/python/tests/test_source.py
+++ b/python/tests/test_source.py
@@ -67,7 +67,7 @@ class aubio_source_read_test_case(aubio_source_test_case_base):
         for p in list_of_sounds:
             try:
                 f = source(p, -1)
-            except ValueError, e:
+            except ValueError as e:
                 pass
             else:
                 self.fail('negative samplerate does not raise ValueError')
@@ -76,7 +76,7 @@ class aubio_source_read_test_case(aubio_source_test_case_base):
         for p in list_of_sounds:
             try:
                 f = source(p, 0, -1)
-            except ValueError, e:
+            except ValueError as e:
                 pass
             else:
                 self.fail('negative hop_size does not raise ValueError')
diff --git a/waflib/Build.py b/waflib/Build.py
index 1111111..2222222 100644
--- a/waflib/Build.py
+++ b/waflib/Build.py
@@ -137,7 +137,7 @@ class BuildContext(Context.Context):
 				waflib.Node.Nod3=self.node_class
 				try:
 					data=cPickle.loads(data)
-				except Exception ,e:
+				except Exception as e:
 					Logs.debug('build: Could not pickle the build cache %s: %r'%(dbfn,e))
 				else:
 					for x in SAVED_ATTRS:
@@ -610,7 +610,7 @@ class UninstallContext(InstallContext):
 		self.uninstall.append(tgt)
 		try:
 			os.remove(tgt)
-		except OSError ,e:
+		except OSError as e:
 			if e.errno!=errno.ENOENT:
 				if not getattr(self,'uninstall_error',None):
 					self.uninstall_error=True
diff --git a/waflib/Configure.py b/waflib/Configure.py
index 1111111..2222222 100644
--- a/waflib/Configure.py
+++ b/waflib/Configure.py
@@ -144,9 +144,9 @@ class ConfigurationContext(Context.Context):
 			module=None
 			try:
 				module=Context.load_tool(tool,tooldir,ctx=self)
-			except ImportError ,e:
+			except ImportError as e:
 				self.fatal('Could not load the Waf tool %r from %r\n%s'%(tool,sys.path,e))
-			except Exception ,e:
+			except Exception as e:
 				self.to_log('imp %r (%r & %r)'%(tool,tooldir,funs))
 				self.to_log(Utils.ex_stack())
 				raise
@@ -169,7 +169,7 @@ class ConfigurationContext(Context.Context):
 			if not f:self.fatal("No such method '%s'."%x)
 			try:
 				f()
-			except Exception ,e:
+			except Exception as e:
 				ret=self.err_handler(x,e)
 				if ret==BREAK:
 					break
diff --git a/waflib/Context.py b/waflib/Context.py
index 1111111..2222222 100644
--- a/waflib/Context.py
+++ b/waflib/Context.py
@@ -158,7 +158,7 @@ class Context(ctx):
 			else:
 				out,err=(None,None)
 				ret=subprocess.Popen(cmd,**kw).wait()
-		except Exception ,e:
+		except Exception as e:
 			raise Errors.WafError('Execution failure: %s'%str(e),ex=e)
 		if out:
 			if not isinstance(out,str):
@@ -197,7 +197,7 @@ class Context(ctx):
 		try:
 			p=subprocess.Popen(cmd,**kw)
 			(out,err)=p.communicate()
-		except Exception ,e:
+		except Exception as e:
 			raise Errors.WafError('Execution failure: %s'%str(e),ex=e)
 		if not isinstance(out,str):
 			out=out.decode(sys.stdout.encoding or'iso8859-1')
diff --git a/waflib/Logs.py b/waflib/Logs.py
index 1111111..2222222 100644
--- a/waflib/Logs.py
+++ b/waflib/Logs.py
@@ -190,7 +190,7 @@ def free_logger(logger):
 		for x in logger.handlers:
 			x.close()
 			logger.removeHandler(x)
-	except Exception ,e:
+	except Exception as e:
 		pass
 def pprint(col,msg,label='',sep='\n'):
 	info("%s%s%s %s"%(colors(col),msg,colors.NORMAL,label),extra={'terminator':sep})
diff --git a/waflib/Node.py b/waflib/Node.py
index 1111111..2222222 100644
--- a/waflib/Node.py
+++ b/waflib/Node.py
@@ -84,7 +84,7 @@ class Node(object):
 					shutil.rmtree(self.abspath())
 				else:
 					os.remove(self.abspath())
-			except OSError ,e:
+			except OSError as e:
 				if os.path.exists(self.abspath()):
 					raise e
 		finally:
@@ -305,7 +305,7 @@ class Node(object):
 						k='^%s$'%k
 						try:
 							accu.append(re.compile(k,flags=reflags))
-						except Exception ,e:
+						except Exception as e:
 							raise Errors.WafError("Invalid pattern: %s"%k,e)
 				ret.append(accu)
 			return ret
diff --git a/waflib/Scripting.py b/waflib/Scripting.py
index 1111111..2222222 100644
--- a/waflib/Scripting.py
+++ b/waflib/Scripting.py
@@ -96,24 +96,24 @@ def waf_entry_point(current_directory,version,wafdir):
 		sys.exit(1)
 	try:
 		set_main_module(os.path.join(Context.run_dir,Context.WSCRIPT_FILE))
-	except Errors.WafError ,e:
+	except Errors.WafError as e:
 		Logs.pprint('RED',e.verbose_msg)
 		Logs.error(str(e))
 		sys.exit(1)
-	except Exception ,e:
+	except Exception as e:
 		Logs.error('Waf: The wscript in %r is unreadable'%Context.run_dir,e)
 		traceback.print_exc(file=sys.stdout)
 		sys.exit(2)
 	try:
 		run_commands()
-	except Errors.WafError ,e:
+	except Errors.WafError as e:
 		if Logs.verbose>1:
 			Logs.pprint('RED',e.verbose_msg)
 		Logs.error(e.msg)
 		sys.exit(1)
 	except SystemExit:
 		raise
-	except Exception ,e:
+	except Exception as e:
 		traceback.print_exc(file=sys.stdout)
 		sys.exit(2)
 	except KeyboardInterrupt:
@@ -207,7 +207,7 @@ def distclean(ctx):
 					shutil.rmtree(proj['out_dir'])
 				except IOError:
 					pass
-				except OSError ,e:
+				except OSError as e:
 					if e.errno!=errno.ENOENT:
 						Logs.warn('Could not remove %r'%proj['out_dir'])
 			else:
@@ -216,7 +216,7 @@ def distclean(ctx):
 				p=os.path.join(k,Options.lockfile)
 				try:
 					os.remove(p)
-				except OSError ,e:
+				except OSError as e:
 					if e.errno!=errno.ENOENT:
 						Logs.warn('Could not remove %r'%p)
 		if not Options.commands:
diff --git a/waflib/Tools/c_config.py b/waflib/Tools/c_config.py
index 1111111..2222222 100644
--- a/waflib/Tools/c_config.py
+++ b/waflib/Tools/c_config.py
@@ -662,7 +662,7 @@ def get_suncc_version(conf,cc):
 	cmd=cc+['-V']
 	try:
 		out,err=conf.cmd_and_log(cmd,output=0)
-	except Errors.WafError ,e:
+	except Errors.WafError as e:
 		if not(hasattr(e,'returncode')and hasattr(e,'stdout')and hasattr(e,'stderr')):
 			conf.fatal('Could not find suncc %r'%cmd)
 		out=e.stdout
diff --git a/waflib/Tools/c_preproc.py b/waflib/Tools/c_preproc.py
index 1111111..2222222 100644
--- a/waflib/Tools/c_preproc.py
+++ b/waflib/Tools/c_preproc.py
@@ -591,7 +591,7 @@ class c_parser(object):
 				elif token=='pragma':
 					if re_pragma_once.match(line.lower()):
 						self.ban_includes.add(self.current_file)
-			except Exception ,e:
+			except Exception as e:
 				if Logs.verbose:
 					debug('preproc: line parsing failed (%s): %s %s',e,line,Utils.ex_stack())
 def scan(task):
diff --git a/waflib/Tools/compiler_c.py b/waflib/Tools/compiler_c.py
index 1111111..2222222 100644
--- a/waflib/Tools/compiler_c.py
+++ b/waflib/Tools/compiler_c.py
@@ -19,7 +19,7 @@ def configure(conf):
 		conf.start_msg('Checking for %r (C compiler)'%compiler)
 		try:
 			conf.load(compiler)
-		except conf.errors.ConfigurationError ,e:
+		except conf.errors.ConfigurationError as e:
 			conf.env.revert()
 			conf.end_msg(False)
 			debug('compiler_c: %r'%e)
diff --git a/waflib/Tools/compiler_cxx.py b/waflib/Tools/compiler_cxx.py
index 1111111..2222222 100644
--- a/waflib/Tools/compiler_cxx.py
+++ b/waflib/Tools/compiler_cxx.py
@@ -19,7 +19,7 @@ def configure(conf):
 		conf.start_msg('Checking for %r (C++ compiler)'%compiler)
 		try:
 			conf.load(compiler)
-		except conf.errors.ConfigurationError ,e:
+		except conf.errors.ConfigurationError as e:
 			conf.env.revert()
 			conf.end_msg(False)
 			debug('compiler_cxx: %r'%e)
diff --git a/waflib/Tools/compiler_d.py b/waflib/Tools/compiler_d.py
index 1111111..2222222 100644
--- a/waflib/Tools/compiler_d.py
+++ b/waflib/Tools/compiler_d.py
@@ -17,7 +17,7 @@ def configure(conf):
 		conf.start_msg('Checking for %r (D compiler)'%compiler)
 		try:
 			conf.load(compiler)
-		except conf.errors.ConfigurationError ,e:
+		except conf.errors.ConfigurationError as e:
 			conf.env.revert()
 			conf.end_msg(False)
 			Logs.debug('compiler_d: %r'%e)
diff --git a/waflib/Tools/compiler_fc.py b/waflib/Tools/compiler_fc.py
index 1111111..2222222 100644
--- a/waflib/Tools/compiler_fc.py
+++ b/waflib/Tools/compiler_fc.py
@@ -18,7 +18,7 @@ def configure(conf):
 		conf.start_msg('Checking for %r (Fortran compiler)'%compiler)
 		try:
 			conf.load(compiler)
-		except conf.errors.ConfigurationError ,e:
+		except conf.errors.ConfigurationError as e:
 			conf.env.revert()
 			conf.end_msg(False)
 			Logs.debug('compiler_fortran: %r'%e)
diff --git a/waflib/Tools/msvc.py b/waflib/Tools/msvc.py
index 1111111..2222222 100644
--- a/waflib/Tools/msvc.py
+++ b/waflib/Tools/msvc.py
@@ -96,7 +96,7 @@ echo LIB=%%LIB%%;%%LIBPATH%%
 	try:
 		try:
 			conf.cmd_and_log(cxx+['/help'],env=env)
-		except Exception ,e:
+		except Exception as e:
 			debug('msvc: get_msvc_version: %r %r %r -> failure'%(compiler,version,target))
 			debug(str(e))
 			conf.fatal('msvc: cannot run the compiler (in get_msvc_version)')
@@ -251,7 +251,7 @@ def gather_winphone_targets(conf,versions,version,vc_path,vsvars):
 	for target,realtarget in all_msvc_platforms[::-1]:
 		try:
 			targets.append((target,(realtarget,conf.get_msvc_version('winphone',version,target,vsvars))))
-		except conf.errors.ConfigurationError ,e:
+		except conf.errors.ConfigurationError as e:
 			pass
 	if targets:
 		versions.append(('winphone '+version,targets))
@@ -368,7 +368,7 @@ def gather_intel_composer_versions(conf,versions):
 				if os.path.isfile(batch_file):
 					try:
 						targets.append((target,(arch,conf.get_msvc_version('intel',version,target,batch_file))))
-					except conf.errors.ConfigurationError ,e:
+					except conf.errors.ConfigurationError as e:
 						pass
 				compilervars_warning_attr='_compilervars_warning_key'
 				if version[0:2]=='13'and getattr(conf,compilervars_warning_attr,True):
diff --git a/waflib/Utils.py b/waflib/Utils.py
index 1111111..2222222 100644
--- a/waflib/Utils.py
+++ b/waflib/Utils.py
@@ -277,7 +277,7 @@ def check_dir(path):
 	if not os.path.isdir(path):
 		try:
 			os.makedirs(path)
-		except OSError ,e:
+		except OSError as e:
 			if not os.path.isdir(path):
 				raise Errors.WafError('Cannot create the folder %r'%path,ex=e)
 def check_exe(name,env=None):
diff --git a/waflib/ansiterm.py b/waflib/ansiterm.py
index 1111111..2222222 100644
--- a/waflib/ansiterm.py
+++ b/waflib/ansiterm.py
@@ -232,7 +232,7 @@ else:
 			return struct.unpack("HHHH",fcntl.ioctl(FD,termios.TIOCGWINSZ,struct.pack("HHHH",0,0,0,0)))[1]
 		try:
 			fun()
-		except Exception ,e:
+		except Exception as e:
 			pass
 		else:
 			get_term_cols=fun
diff --git a/waflib/extras/compat15.py b/waflib/extras/compat15.py
index 1111111..2222222 100644
--- a/waflib/extras/compat15.py
+++ b/waflib/extras/compat15.py
@@ -44,7 +44,7 @@ def cmd_output(cmd,**kw):
 	try:
 		p=Utils.subprocess.Popen(cmd,**kw)
 		output=p.communicate()[0]
-	except OSError ,e:
+	except OSError as e:
 		raise ValueError(str(e))
 	if p.returncode:
 		if not silent:
