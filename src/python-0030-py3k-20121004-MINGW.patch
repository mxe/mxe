diff -urN a-3.3.0/Include/fileobject.h b-3.3.0/Include/fileobject.h
--- a-3.3.0/Include/fileobject.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/fileobject.h	Fri Nov 16 22:45:41 2012
@@ -45,7 +45,8 @@
 #endif /* Py_LIMITED_API */
 
 /* A routine to check if a file descriptor can be select()-ed. */
-#ifdef HAVE_SELECT
+/* NOTE check below obsolete Py_SOCKET_FD_CAN_BE_GE_FD_SETSIZE */
+#if defined(HAVE_SELECT) && !defined(MS_WIN32)
  #define _PyIsSelectable_fd(FD) (((FD) >= 0) && ((FD) < FD_SETSIZE))
 #else
  #define _PyIsSelectable_fd(FD) (1)
diff -urN a-3.3.0/Include/node.h b-3.3.0/Include/node.h
--- a-3.3.0/Include/node.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/node.h	Fri Nov 16 22:45:41 2012
@@ -21,7 +21,7 @@
                                       char *str, int lineno, int col_offset);
 PyAPI_FUNC(void) PyNode_Free(node *n);
 #ifndef Py_LIMITED_API
-Py_ssize_t _PyNode_SizeOf(node *n);
+PyAPI_FUNC(Py_ssize_t) _PyNode_SizeOf(node *n);
 #endif
 
 /* Node access functions */
diff -urN a-3.3.0/Include/objimpl.h b-3.3.0/Include/objimpl.h
--- a-3.3.0/Include/objimpl.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/objimpl.h	Fri Nov 16 22:45:41 2012
@@ -253,6 +253,12 @@
         Py_ssize_t gc_refs;
     } gc;
     long double dummy;  /* force worst-case alignment */
+#if defined(__MINGW32__)
+/* FIXME: what about 64-bit platforms ?
+ * see http://mail.python.org/pipermail/python-dev/2009-July/090724.html
+ */
+	double dummy1;
+#endif
 } PyGC_Head;
 
 extern PyGC_Head *_PyGC_generation0;
diff -urN a-3.3.0/Include/osdefs.h b-3.3.0/Include/osdefs.h
--- a-3.3.0/Include/osdefs.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/osdefs.h	Fri Nov 16 22:45:41 2012
@@ -17,7 +17,9 @@
 #else
 #define SEP L'\\'
 #define ALTSEP L'/'
+#ifndef MAXPATHLEN
 #define MAXPATHLEN 256
+#endif
 #endif
 #define DELIM L';'
 #endif
diff -urN a-3.3.0/Include/pymath.h b-3.3.0/Include/pymath.h
--- a-3.3.0/Include/pymath.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/pymath.h	Fri Nov 16 22:45:41 2012
@@ -107,6 +107,8 @@
  *    non-infinite value v sitting in an 80-bit x87 register such that
  *    v becomes infinite when spilled from the register to 64-bit memory.
  * Note: PC/pyconfig.h defines Py_IS_INFINITY as _isinf
+ * FIXME: PC/pyconfig.h defines Py_IS_INFINITY as (!_finite(X) && !_isnan(X))
+ * so that above note isn't correct !!!
  */
 #ifndef Py_IS_INFINITY
 #  if defined HAVE_DECL_ISINF && HAVE_DECL_ISINF == 1
diff -urN a-3.3.0/Include/pyport.h b-3.3.0/Include/pyport.h
--- a-3.3.0/Include/pyport.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/pyport.h	Fri Nov 16 22:45:41 2012
@@ -664,6 +664,152 @@
 #endif /* defined(HAVE_OPENPTY) || defined(HAVE_FORKPTY) */
 
 
+#ifdef __MINGW32__
+/* FIXME: some of next definitions specific to gcc(mingw build) can be
+   generalized on definitions of _WIN32 or WIN32 and to be common for
+   all windows build instead explicitly to define only for non-autotools
+   based builds (see PC/pyconfig.h for details). */
+#if defined(_WIN64)
+#  define MS_WIN64
+#endif
+#if !defined(MS_WIN32) && defined(_WIN32)
+#  define MS_WIN32
+#endif
+#if !defined(MS_WIN32) && defined(_WIN32)
+#  define MS_WIN32
+#endif
+#if !defined(MS_WINDOWS) && defined(MS_WIN32)
+#  define MS_WINDOWS
+#endif
+
+#ifndef PYTHONPATH
+#  define PYTHONPATH L".\\DLLs;.\\lib"
+#endif
+
+/* python 2.6+ requires Windows 2000 or greater. */
+#define Py_WINVER 0x0500
+
+#if defined(Py_BUILD_CORE) || defined(Py_BUILD_CORE_MODULE)
+/* FIXME if NTDDI_xxx is in use by mingw (see PC/pyconfig.h) */
+#ifndef WINVER
+#  define WINVER Py_WINVER
+#endif
+#ifndef _WIN32_WINNT
+#  define _WIN32_WINNT Py_WINVER
+#endif
+#endif
+
+#ifdef PLATFORM
+/*NOTE: if compile getplatform.c PLATFORM is set to MACHDEP that is
+  "win" for mingw build (see respective comment in configure.in). */
+# undef PLATFORM
+#endif
+/* always set to "win32" - see PC/pyconfig.h */
+#define PLATFORM "win32"
+
+#if defined(MS_WIN64)
+#  define SIZEOF_HKEY 8
+#elif defined(MS_WIN32)
+#  define SIZEOF_HKEY 4
+#endif
+
+/*NOTE: mingw has isinf as macro defined in math.h.
+  Since PC/pyconfig.h define Py_IS_INFINITY(X) that cover HAVE_DECL_ISFINITE
+  here for Py_IS_INFINITY we define same as for MSVC build.
+  This makes HAVE_DECL_ISFINITE needless.
+  Also see commants in configure.in and pymath.h. */
+#define Py_IS_INFINITY(X) (!_finite(X) && !_isnan(X))
+
+#ifndef HAVE_LARGEFILE_SUPPORT
+/*
+  FIXME: on windows platforms:
+   - Python use PY_LONG_LONG(!) for Py_off_t (_fileio.c);
+   - HAVE_LARGEFILE_SUPPORT is defined in PC/pyconfig.h;
+   - PC/pyconfig.h define 4 for SIZEOF_OFF_T and 8 for SIZEOF_FPOS_T;
+   - If HAVE_LARGEFILE_SUPPORT isn't defined python will use off_t(!)
+   for Py_off_t (see fileobjects.c and bz2module.c).
+  Since for mingw configure detect 4 for size of "off_t" and 8 - for
+  "fpos_t" we has to define HAVE_LARGEFILE_SUPPORT too.
+  TODO: to test with AC_SYS_LARGEFILE and appropriate updates in
+  python code.
+*/
+#  define HAVE_LARGEFILE_SUPPORT
+#endif
+
+#if defined(Py_ENABLE_SHARED)
+#  define MS_COREDLL 1 /* deprecated old symbol, but still in use for windows code */
+#else
+#  define MS_NO_COREDLL 1
+#endif
+
+#if Py_UNICODE_SIZE == 2
+/* For mingw is 2 but FIXME: What about to raise error in configure if
+   unicode size isn't two ? Did python windows code support ucs4 ? */
+#  define Py_WIN_WIDE_FILENAMES
+#endif
+
+/* NOTE: Don't define HAVE_STDDEF_H.
+ * It is defined by PC/pyconfig.h and used by Include/Python.h
+ * (with comment For size_t?) but isn't required for mingw  */
+
+#if 0
+/* Obsolete:
+ *   Author: Charles-FranÃ§ois Natali <neologix@free.fr>
+ *   Date:   Sun Aug 28 17:51:43 2011 +0200
+ * NOTE: still defined in PC/pyconfig.h ;)
+ */
+#define Py_SOCKET_FD_CAN_BE_GE_FD_SETSIZE
+#endif
+
+/* All other defines from PC/pyconfig.h are in autoconf generated
+   pyconfig.h */
+#if 0
+/*FIXME:
+  MSDN:
+    "The getaddrinfo function was added to the ws2_32.dll on Windows XP
+    and later."
+  mingw:
+    getaddrinfo and getnameinfo is defined for WINVER >= 0x0501.
+  PC/pyconfig.h:
+    "Python 2.6+ requires Windows 2000 or greater"
+  So far so good but socketmodule.h define HAVE_GETADDRINFO and
+  HAVE_GETNAMEINFO under very specific condition :
+    # ifdef SIO_GET_MULTICAST_FILTER
+    #  include <MSTcpIP.h>
+  So the question is "Separate SDKs" required for w2k in MSVC build ?
+  TODO: resolve later, may by configure :-/. For now python code will
+  use fake implementation and if user define appropriate value for
+  WINVER - the functionas from C runtime.
+  For details see socketmodule.c .
+  */
+#ifndef HAVE_GETADDRINFO
+#  define HAVE_GETADDRINFO
+#endif
+#ifndef HAVE_GETNAMEINFO
+#  define HAVE_GETNAMEINFO
+#endif
+#endif
+
+/* Refer to <Modules/_math.h> .
+   For mingw host configure detect functions described as HAVE_XXX
+   in _math.h but as MSVC don't define them we will undefine HAVE_XXX
+   too to use _Py_* replacements same as MSVC build .
+ */
+#undef HAVE_ACOSH
+#undef HAVE_ASINH
+#undef HAVE_ATANH
+#undef HAVE_EXPM1
+#undef HAVE_LOG1P
+
+/* Refer to <PC/pyconfig.h> .
+   Side by Side assemblies are not supported by default in MSVC CRT 10 .
+ */
+#if __MSVCRT_VERSION__ >= 0x0800 && __MSVCRT_VERSION__ < 0x1000
+#define HAVE_SXS 1
+#endif
+
+#endif /*def __MINGW32__*/
+
 /* On 4.4BSD-descendants, ctype functions serves the whole range of
  * wchar_t character set rather than single byte code points only.
  * This characteristic can break some operations of string object
@@ -717,12 +863,12 @@
 */
 
 /*
-  All windows ports, except cygwin, are handled in PC/pyconfig.h.
+  MSVC windows port is handled in PC/pyconfig.h.
 
-  Cygwin is the only other autoconf platform requiring special
+  Cygwin and Mingw are autoconf platforms requiring special
   linkage handling and it uses __declspec().
 */
-#if defined(__CYGWIN__)
+#if defined(__CYGWIN__) || defined(__MINGW32__)
 #       define HAVE_DECLSPEC_DLL
 #endif
 
@@ -745,9 +891,17 @@
         /* Under Cygwin, auto-import functions to prevent compilation */
         /* failures similar to those described at the bottom of 4.1: */
         /* http://docs.python.org/extending/windows.html#a-cookbook-approach */
-#                       if !defined(__CYGWIN__)
+#                       if !defined(__CYGWIN__) && !defined(__MINGW32__)
 #                               define PyAPI_FUNC(RTYPE) __declspec(dllimport) RTYPE
-#                       endif /* !__CYGWIN__ */
+#                       else
+#                               define PyAPI_FUNC(RTYPE) RTYPE
+#                       endif /* !__CYGWIN__  !__MINGW32__ */
+            /* NOTE: The issue3945 "compile error in _fileio.c (cygwin)"
+             * was resolved with modification of code.
+             * This issue was resolved for gcc(mingw) with enabling auto
+             * import feature. Since _fileio.c problem now disappear there
+             * is no more reasons to avoid dllimport for gcc(mingw).
+             */
 #                       define PyAPI_DATA(RTYPE) extern __declspec(dllimport) RTYPE
         /* module init functions outside the core must be exported */
 #                       if defined(__cplusplus)
diff -urN a-3.3.0/Include/pythonrun.h b-3.3.0/Include/pythonrun.h
--- a-3.3.0/Include/pythonrun.h	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Include/pythonrun.h	Fri Nov 16 22:45:41 2012
@@ -175,7 +175,7 @@
 PyAPI_FUNC(wchar_t *) Py_GetPath(void);
 PyAPI_FUNC(void)      Py_SetPath(const wchar_t *);
 #ifdef MS_WINDOWS
-int _Py_CheckPython3();
+int _Py_CheckPython3(void);
 #endif
 
 /* In their own files */
diff -urN a-3.3.0/Lib/ctypes/test/test_as_parameter.py b-3.3.0/Lib/ctypes/test/test_as_parameter.py
--- a-3.3.0/Lib/ctypes/test/test_as_parameter.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/ctypes/test/test_as_parameter.py	Fri Nov 16 22:45:41 2012
@@ -1,6 +1,7 @@
 import unittest
 from ctypes import *
 import _ctypes_test
+import sys
 
 dll = CDLL(_ctypes_test.__file__)
 
@@ -171,6 +172,10 @@
         s2h = dll.ret_2h_func(self.wrap(inp))
         self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
 
+    # This is known cdecl incompatibility between GCC
+    # and MSVC. It is addressed in GCC issue #36834.
+    # Python libffi detect it and complain.
+    @unittest.skipIf(sys.platform == "win32" and sys.version.find("GCC") >= 0, 'XFAIL GCC(mingw)')
     def test_struct_return_8H(self):
         class S8I(Structure):
             _fields_ = [("a", c_int),
diff -urN a-3.3.0/Lib/ctypes/test/test_functions.py b-3.3.0/Lib/ctypes/test/test_functions.py
--- a-3.3.0/Lib/ctypes/test/test_functions.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/ctypes/test/test_functions.py	Fri Nov 16 22:45:41 2012
@@ -359,6 +359,10 @@
             s2h = windll.s_ret_2h_func(S2H(99, 88))
             self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
 
+    # This is known cdecl incompatibility between GCC
+    # and MSVC. It is addressed in GCC issue #36834.
+    # Python libffi detect it and complain.
+    @unittest.skipIf(sys.platform == "win32" and sys.version.find("GCC") >= 0, 'XFAIL GCC(mingw)')
     def test_struct_return_8H(self):
         class S8I(Structure):
             _fields_ = [("a", c_int),
diff -urN a-3.3.0/Lib/ctypes/util.py b-3.3.0/Lib/ctypes/util.py
--- a-3.3.0/Lib/ctypes/util.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/ctypes/util.py	Fri Nov 16 22:45:41 2012
@@ -6,6 +6,11 @@
 if os.name == "nt":
 
     def _get_build_version():
+        #***********************************************************
+        # NOTE: As example for GCC(mingw) build sys.version return:
+        # '2.7a0 (trunk:<REVISION>M, <DATE>, <TIME>) \n[GCC 3.4.5 (mingw special)]'
+        # '2.7a0 (trunk:<REVISION>M, <DATE>, <TIME>) \n[GCC 4.4.0]'
+        #***********************************************************
         """Return the version of MSVC that was used to build Python.
 
         For Python 2.3 and up, the version number is included in
@@ -29,6 +34,15 @@
         return None
 
     def find_msvcrt():
+        #************************************************************
+        # FIXME: For GCC(mingw) runtime don't depend from compiler
+        # version ;). We may use -D__MSVCRT_VERSION__ to detect which
+        # verion is requested by user, but the name of the library
+        # to be default.
+        # As example WXP is with version 7.0 of msvcrt.dll.
+        # Anyway since _get_build_version return 6 in most(standard)
+        # cases this method will return msvcrt{d}. May be not so bad.
+        #************************************************************
         """Return the name of the VC runtime dll"""
         version = _get_build_version()
         if version is None:
diff -urN a-3.3.0/Lib/distutils/ccompiler.py b-3.3.0/Lib/distutils/ccompiler.py
--- a-3.3.0/Lib/distutils/ccompiler.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/ccompiler.py	Fri Nov 16 22:45:41 2012
@@ -948,6 +948,8 @@
         osname = os.name
     if platform is None:
         platform = sys.platform
+    if osname == "nt" and sys.version.find('GCC') >= 0:
+        return 'mingw32'
     for pattern, compiler in _default_compilers:
         if re.match(pattern, platform) is not None or \
            re.match(pattern, osname) is not None:
diff -urN a-3.3.0/Lib/distutils/command/build_ext.py b-3.3.0/Lib/distutils/command/build_ext.py
--- a-3.3.0/Lib/distutils/command/build_ext.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/command/build_ext.py	Fri Nov 16 22:45:41 2012
@@ -22,7 +22,8 @@
     from site import USER_BASE
     HAS_USER_SITE = True
 
-if os.name == 'nt':
+# GCC(mingw): os.name is "nt" but build system is posix
+if os.name == 'nt' and sys.version.find('GCC') < 0:
     from distutils.msvccompiler import get_build_version
     MSVC_VERSION = int(get_build_version())
 
@@ -185,7 +186,8 @@
         # for extensions under windows use different directories
         # for Release and Debug builds.
         # also Python's library directory must be appended to library_dirs
-        if os.name == 'nt':
+        # GCC(mingw): os.name is "nt" but build system is posix
+        if os.name == 'nt' and sys.version.find('GCC') < 0:
             # the 'libs' directory is for binary installs - we assume that
             # must be the *native* platform.  But we don't really support
             # cross-compiling via a binary install anyway, so we let it go.
@@ -230,7 +232,8 @@
 
         # for extensions under Cygwin and AtheOS Python's library directory must be
         # appended to library_dirs
-        if sys.platform[:6] == 'cygwin' or sys.platform[:6] == 'atheos':
+        if (sys.platform[:6] == 'cygwin' or sys.platform[:6] == 'atheos'
+            or (sys.platform == 'win32' and sys.version.find('GCC') >= 0)):
             if sys.executable.startswith(os.path.join(sys.exec_prefix, "bin")):
                 # building third party extensions
                 self.library_dirs.append(os.path.join(sys.prefix, "lib",
@@ -696,6 +699,34 @@
         # pyconfig.h that MSVC groks.  The other Windows compilers all seem
         # to need it mentioned explicitly, though, so that's what we do.
         # Append '_d' to the python import library on debug builds.
+
+        # FIXME: What is purpose of code below ?
+        # The posix build system khow requred libraries to build a module.
+        # The libraries are stored in config(Makefile) variables BLDLIBRARY,
+        # MODLIBS and SHLIBS. Note that some variables may contain linker
+        # flags.
+        # NOTE: For now we will check only GCC(mingw) compiler as is clear
+        # that we build for windows platfrom.
+        # The code for GCC(mingw) is not correct but this is distutils
+        # limitation - we has to pass variables to the linker as is
+        # instead only library names.
+        if self.compiler.compiler_type == 'mingw32':
+            from distutils import sysconfig
+            template = "python%s"
+            if self.debug:
+                template = template + '_d'
+            extra = [(template % (sysconfig.get_config_var('VERSION')))]
+            for lib in sysconfig.get_config_var('BLDLIBRARY').split():
+                if lib.startswith('-l'):
+                    extra.append(lib[2:])
+            for lib in sysconfig.get_config_var('MODLIBS').split():
+                if lib.startswith('-l'):
+                    extra.append(lib[2:])
+            for lib in sysconfig.get_config_var('SHLIBS').split():
+                if lib.startswith('-l'):
+                    extra.append(lib[2:])
+            return ext.libraries + extra
+
         if sys.platform == "win32":
             from distutils.msvccompiler import MSVCCompiler
             if not isinstance(self.compiler, MSVCCompiler):
@@ -722,7 +753,8 @@
             # don't extend ext.libraries, it may be shared with other
             # extensions, it is a reference to the original list
             return ext.libraries + [pythonlib]
-        elif sys.platform[:6] == "cygwin":
+        # NOTE : cygwin use posix build rules ;)
+        elif sys.platform[:6] == "cygwin" and False:
             template = "python%d.%d"
             pythonlib = (template %
                    (sys.hexversion >> 24, (sys.hexversion >> 16) & 0xff))
diff -urN a-3.3.0/Lib/distutils/cygwinccompiler.py b-3.3.0/Lib/distutils/cygwinccompiler.py
--- a-3.3.0/Lib/distutils/cygwinccompiler.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/cygwinccompiler.py	Fri Nov 16 22:45:41 2012
@@ -63,6 +63,18 @@
     """Include the appropriate MSVC runtime library if Python was built
     with MSVC 7.0 or later.
     """
+    # FIXME: next code is from issue870382
+    # MS C-runtime libraries never support backward compatibility.
+    # Linking to a different library without to specify correct runtime
+    # version for the headers will link renamed functions to msvcrt.
+    # See issue3308: this piece of code is python problem even
+    # with correct w32api headers.
+    # Issue: for MSVC compiler we can get the version and from version
+    # to determine mcvcrt as code below. But what about if python is
+    # build with GCC compiler?
+    # Output of sys.version is information for python build on first
+    # line, on the next line is information for the compiler and the
+    # output lack information for the C-runtime.
     msc_pos = sys.version.find('MSC v.')
     if msc_pos != -1:
         msc_ver = sys.version[msc_pos+6:msc_pos+10]
@@ -83,6 +95,8 @@
             return ['msvcr100']
         else:
             raise ValueError("Unknown MS Compiler version %s " % msc_ver)
+    else:
+        return []
 
 
 class CygwinCCompiler(UnixCCompiler):
@@ -92,6 +106,9 @@
     obj_extension = ".o"
     static_lib_extension = ".a"
     shared_lib_extension = ".dll"
+    # FIXME: dylib_... = ".dll.a" is not enought for binutils
+    # loader on win32 platform !!!
+    dylib_lib_extension = ".dll.a"
     static_lib_format = "lib%s%s"
     shared_lib_format = "%s%s"
     exe_extension = ".exe"
@@ -110,6 +127,10 @@
                 "Compiling may fail because of undefined preprocessor macros."
                 % details)
 
+        # Next line of code is problem for cross-compiled enviroment:
+        # NOTE: GCC cross-compiler is prefixed by the <hostarch>-<hostos>-
+        # and by default binaries are installed in same directory
+        # as native compiler.
         self.gcc_version, self.ld_version, self.dllwrap_version = \
             get_versions()
         self.debug_print(self.compiler_type + ": gcc %s, ld %s, dllwrap %s\n" %
@@ -134,6 +155,9 @@
         else:
             shared_option = "-mdll -static"
 
+        # FIXME:
+        # Hard-code may override unix-compiler settings and isn't
+        # possible to use Makefile variables to pass correct flags !
         # Hard-code GCC because that's what this is all about.
         # XXX optimization, warnings etc. should be customizable.
         self.set_executables(compiler='gcc -mcygwin -O -Wall',
@@ -254,11 +278,19 @@
             output_dir = ''
         obj_names = []
         for src_name in source_filenames:
-            # use normcase to make sure '.rc' is really '.rc' and not '.RC'
-            base, ext = os.path.splitext(os.path.normcase(src_name))
+            # FIXME: "bogus checks for suffix" - as example the commented
+            # by #BOGUS# code break valid assembler suffix ".S" !
+            #BOGUS## use normcase to make sure '.rc' is really '.rc' and not '.RC'
+            #BOGUS#base, ext = os.path.splitext(os.path.normcase(src_name))
+            base, ext = os.path.splitext (src_name)
+            ext_normcase = os.path.normcase(ext)
+            if ext_normcase in ['.rc','.res']:
+                ext = ext_normcase
             if ext not in (self.src_extensions + ['.rc','.res']):
                 raise UnknownFileError("unknown file type '%s' (from '%s')" % \
                       (ext, src_name))
+            base = os.path.splitdrive(base)[1] # Chop off the drive
+            base = base[os.path.isabs(base):]  # If abs, chop off leading /
             if strip_dir:
                 base = os.path.basename (base)
             if ext in ('.res', '.rc'):
diff -urN a-3.3.0/Lib/distutils/sysconfig.py b-3.3.0/Lib/distutils/sysconfig.py
--- a-3.3.0/Lib/distutils/sysconfig.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/sysconfig.py	Fri Nov 16 22:45:41 2012
@@ -91,7 +91,8 @@
     """
     if prefix is None:
         prefix = plat_specific and BASE_EXEC_PREFIX or BASE_PREFIX
-    if os.name == "posix":
+    # GCC(mingw): os.name is "nt" but build system is posix
+    if os.name == "posix" or sys.version.find('GCC') >= 0:
         if python_build:
             # Assume the executable is in the build directory.  The
             # pyconfig.h file should be in the same directory.  Since
@@ -106,6 +107,7 @@
             else:
                 incdir = os.path.join(get_config_var('srcdir'), 'Include')
             return os.path.normpath(incdir)
+        # TODO mingw build as get_python_version() return dot separated value
         python_dir = 'python' + get_python_version() + build_flags
         return os.path.join(prefix, "include", python_dir)
     elif os.name == "nt":
@@ -170,8 +172,14 @@
 
     Mainly needed on Unix, so we can plug in the information that
     varies across Unices and is stored in Python's Makefile.
+
+    NOTE (known limitation of python build/install system):
+    In cross-build environment make macros like CC and LDSHARED
+    contain cross-compiler/linker instead of host compiler/linker.
     """
+    posix_build = None
     if compiler.compiler_type == "unix":
+        posix_build = True
         if sys.platform == "darwin":
             # Perform first-time customization of compiler-related
             # config vars on OS X now that we know we need a compiler.
@@ -186,7 +194,12 @@
                 import _osx_support
                 _osx_support.customize_compiler(_config_vars)
                 _config_vars['CUSTOMIZED_OSX_COMPILER'] = 'True'
+    elif compiler.compiler_type == "mingw32":
+        # GCC(mingw): if build system is posix
+        if sys.version.find('GCC') >= 0:
+            posix_build = True
 
+    if posix_build == True:
         (cc, cxx, opt, cflags, ccshared, ldshared, so_ext, ar, ar_flags) = \
             get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS',
                             'CCSHARED', 'LDSHARED', 'SO', 'AR', 'ARFLAGS')
@@ -234,7 +247,8 @@
 def get_config_h_filename():
     """Return full pathname of installed pyconfig.h file."""
     if python_build:
-        if os.name == "nt":
+        # GCC(mingw): os.name is "nt" but build system is posix
+        if os.name == "nt" and sys.version.find('GCC') < 0:
             inc_dir = os.path.join(_sys_home or project_base, "PC")
         else:
             inc_dir = _sys_home or project_base
@@ -475,6 +489,11 @@
 
 def _init_nt():
     """Initialize the module as appropriate for NT"""
+    if sys.version.find('GCC') >= 0:
+        # GCC(mingw) use posix build system
+        # FIXME: may be modification has to be in get_config_vars ?
+        _init_posix()
+        return
     g = {}
     # set basic install directories
     g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
@@ -533,9 +552,12 @@
         _config_vars['prefix'] = PREFIX
         _config_vars['exec_prefix'] = EXEC_PREFIX
 
+        # GCC(mingw): os.name is "nt" but build system is posix
+        posix_build = os.name == "posix" or sys.version.find('GCC') >= 0
+
         # Always convert srcdir to an absolute path
         srcdir = _config_vars.get('srcdir', project_base)
-        if os.name == 'posix':
+        if posix_build:
             if python_build:
                 # If srcdir is a relative path (typically '.' or '..')
                 # then it should be interpreted relative to the directory
@@ -554,7 +576,7 @@
         # Normally it is relative to the build directory.  However, during
         # testing, for example, we might be running a non-installed python
         # from a different directory.
-        if python_build and os.name == "posix":
+        if python_build and posix_build:
             base = os.path.dirname(os.path.abspath(sys.executable))
             if (not os.path.isabs(_config_vars['srcdir']) and
                 base != os.getcwd()):
diff -urN a-3.3.0/Lib/distutils/tests/support.py b-3.3.0/Lib/distutils/tests/support.py
--- a-3.3.0/Lib/distutils/tests/support.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/tests/support.py	Fri Nov 16 22:45:41 2012
@@ -6,6 +6,7 @@
 import unittest
 import sysconfig
 from copy import deepcopy
+from test.support import SAVEDCWD as _test_SAVEDCWD
 
 from distutils import log
 from distutils.log import DEBUG, INFO, WARN, ERROR, FATAL
@@ -175,9 +176,9 @@
 def fixup_build_ext(cmd):
     """Function needed to make build_ext tests pass.
 
-    When Python was built with --enable-shared on Unix, -L. is not enough to
+    When Python was built with --enable-shared on Posix, -L. is not enough to
     find libpython<blah>.so, because regrtest runs in a tempdir, not in the
-    source directory where the .so lives.
+    build directory where the .so lives.
 
     When Python was built with in debug mode on Windows, build_ext commands
     need their debug attribute set, and it is not done automatically for
@@ -194,6 +195,11 @@
     """
     if os.name == 'nt':
         cmd.debug = sys.executable.endswith('_d.exe')
+        if (sys.version.find("GCC") >= 0 and
+            sysconfig.get_config_var('Py_ENABLE_SHARED')):
+            if cmd.library_dirs is None:
+                cmd.library_dirs = []
+            cmd.library_dirs.insert(0, _test_SAVEDCWD)
     elif sysconfig.get_config_var('Py_ENABLE_SHARED'):
         # To further add to the shared builds fun on Unix, we can't just add
         # library_dirs to the Extension() instance because that doesn't get
diff -urN a-3.3.0/Lib/distutils/tests/test_bdist.py b-3.3.0/Lib/distutils/tests/test_bdist.py
--- a-3.3.0/Lib/distutils/tests/test_bdist.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/tests/test_bdist.py	Fri Nov 16 22:45:41 2012
@@ -35,7 +35,11 @@
 
         names = ['bdist_dumb', 'bdist_wininst']  # bdist_rpm does not support --skip-build
         if os.name == 'nt':
-            names.append('bdist_msi')
+            try:
+                dist.get_command_obj('bdist_msi')
+                names.append('bdist_msi')
+            except:
+                pass
 
         for name in names:
             subcmd = cmd.get_finalized_command(name)
diff -urN a-3.3.0/Lib/distutils/tests/test_bdist_msi.py b-3.3.0/Lib/distutils/tests/test_bdist_msi.py
--- a-3.3.0/Lib/distutils/tests/test_bdist_msi.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/tests/test_bdist_msi.py	Fri Nov 16 22:45:41 2012
@@ -12,7 +12,10 @@
 
     def test_minimal(self):
         # minimal test XXX need more tests
-        from distutils.command.bdist_msi import bdist_msi
+        try:
+            from distutils.command.bdist_msi import bdist_msi # if msi module is not build
+        except ImportError:
+            self.skipTest("requires bdist_msi module")
         project_dir, dist = self.create_dist()
         cmd = bdist_msi(dist)
         cmd.ensure_finalized()
diff -urN a-3.3.0/Lib/distutils/tests/test_config_cmd.py b-3.3.0/Lib/distutils/tests/test_config_cmd.py
--- a-3.3.0/Lib/distutils/tests/test_config_cmd.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/tests/test_config_cmd.py	Fri Nov 16 22:45:41 2012
@@ -38,6 +38,7 @@
         self.assertEqual(len(self._logs), numlines+1)
 
     def test_search_cpp(self):
+        # TODO: mingw host ?
         if sys.platform == 'win32':
             return
         pkg_dir, dist = self.create_dist()
diff -urN a-3.3.0/Lib/distutils/tests/test_cygwinccompiler.py b-3.3.0/Lib/distutils/tests/test_cygwinccompiler.py
--- a-3.3.0/Lib/distutils/tests/test_cygwinccompiler.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/tests/test_cygwinccompiler.py	Fri Nov 16 22:45:41 2012
@@ -121,7 +121,7 @@
         # none
         sys.version  = ('2.6.1 (r261:67515, Dec  6 2008, 16:42:21) '
                         '\n[GCC 4.0.1 (Apple Computer, Inc. build 5370)]')
-        self.assertEqual(get_msvcr(), None)
+        self.assertEqual(get_msvcr(), [])
 
         # MSVC 7.0
         sys.version = ('2.5.1 (r251:54863, Apr 18 2007, 08:51:08) '
diff -urN a-3.3.0/Lib/distutils/unixccompiler.py b-3.3.0/Lib/distutils/unixccompiler.py
--- a-3.3.0/Lib/distutils/unixccompiler.py	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/Lib/distutils/unixccompiler.py	Fri Nov 16 22:45:41 2012
@@ -238,9 +238,13 @@
                 # -Wl whenever gcc was used in the past it is probably
                 # safest to keep doing so.
                 if sysconfig.get_config_var("GNULD") == "yes":
-                    # GNU ld needs an extra option to get a RUNPATH
+                    # GNU ELF ld needs an extra option to get a RUNPATH
                     # instead of just an RPATH.
-                    return "-Wl,--enable-new-dtags,-R" + dir
+                    if sys.platform in ["win32", "cygwin"] or \
+                       "mingw" in compiler:
+                        return []
+                    else:
+                        return "-Wl,--enable-new-dtags,-R" + dir
                 else:
                     return "-Wl,-R" + dir
             else:
diff -urN a-3.3.0/Lib/sysconfig.py b-3.3.0/Lib/sysconfig.py
--- a-3.3.0/Lib/sysconfig.py	Fri Nov 16 22:45:29 2012
+++ b-3.3.0/Lib/sysconfig.py	Fri Nov 16 22:45:41 2012
@@ -166,6 +166,10 @@
         _INSTALL_SCHEMES[scheme]['include'] = '{srcdir}/Include'
         _INSTALL_SCHEMES[scheme]['platinclude'] = '{projectbase}/.'
 
+    # GCC(mingw) use posix build system
+    if os.name == "nt" and sys.version.find('GCC') >= 0:
+        _INSTALL_SCHEMES['nt']['include'] =  '{srcdir}/Include'
+        _INSTALL_SCHEMES['nt']['platinclude'] =  '{projectbase}/.'
 
 def _subst_vars(s, local_vars):
     try:
@@ -453,7 +457,8 @@
 def get_config_h_filename():
     """Return the path of pyconfig.h."""
     if _PYTHON_BUILD:
-        if os.name == "nt":
+        # GCC(mingw): os.name is "nt" but build system is posix
+        if os.name == "nt" and sys.version.find('GCC') < 0:
             inc_dir = os.path.join(_sys_home or _PROJECT_BASE, "PC")
         else:
             inc_dir = _sys_home or _PROJECT_BASE
@@ -524,9 +529,16 @@
             # sys.abiflags may not be defined on all platforms.
             _CONFIG_VARS['abiflags'] = ''
 
-        if os.name in ('nt', 'os2'):
-            _init_non_posix(_CONFIG_VARS)
+        # GCC(mingw) use posix build system
+        posix_build = False
         if os.name == 'posix':
+            posix_build = True
+        else:
+            if os.name == 'nt' and sys.version.find('GCC') >= 0:
+                posix_build = True
+        if os.name in ('nt', 'os2') and not posix_build:
+            _init_non_posix(_CONFIG_VARS)
+        if posix_build:
             _init_posix(_CONFIG_VARS)
         # Setting 'userbase' is done below the call to the
         # init function to enable using 'get_config_var' in
@@ -535,7 +547,7 @@
 
         # Always convert srcdir to an absolute path
         srcdir = _CONFIG_VARS.get('srcdir', _PROJECT_BASE)
-        if os.name == 'posix':
+        if posix_build:
             if _PYTHON_BUILD:
                 # If srcdir is a relative path (typically '.' or '..')
                 # then it should be interpreted relative to the directory
diff -urN a-3.3.0/Lib/test/test_capi.py b-3.3.0/Lib/test/test_capi.py
--- a-3.3.0/Lib/test/test_capi.py	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Lib/test/test_capi.py	Fri Nov 16 22:45:42 2012
@@ -217,20 +217,21 @@
 class EmbeddingTest(unittest.TestCase):
 
     @unittest.skipIf(
-        sys.platform.startswith('win'),
-        "test doesn't work under Windows")
+        sys.platform.startswith('win') and sys.version.find('GCC') < 0,
+        "test doesn't work with MSVC")
     def test_subinterps(self):
-        # XXX only tested under Unix checkouts
-        basepath = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
+        # XXX only tested under Posix checkouts
+        basepath = support.SAVEDCWD
         oldcwd = os.getcwd()
         # This is needed otherwise we get a fatal error:
         # "Py_Initialize: Unable to get the locale encoding
         # LookupError: no codec search functions registered: can't find encoding"
         os.chdir(basepath)
         try:
-            exe = os.path.join(basepath, "Modules", "_testembed")
-            if not os.path.exists(exe):
-                self.skipTest("%r doesn't exist" % exe)
+            from distutils.spawn import find_executable
+            exe = find_executable("_testembed", basepath)
+            if not exe:
+                self.skipTest("_testembed executable not found")
             p = subprocess.Popen([exe],
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
diff -urN a-3.3.0/Lib/test/test_curses.py b-3.3.0/Lib/test/test_curses.py
--- a-3.3.0/Lib/test/test_curses.py	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Lib/test/test_curses.py	Fri Nov 16 22:45:42 2012
@@ -169,11 +169,16 @@
     curses.delay_output(1)
     curses.echo() ; curses.echo(1)
 
-    f = tempfile.TemporaryFile()
+    fx = tempfile.TemporaryFile()
+    # cf tempfile.py TemporaryFile vs NamedTemporaryFile
+    if os.name != 'posix' or os.sys.platform == 'cygwin':
+        f = fx.file
+    else:
+        f = fx
     stdscr.putwin(f)
     f.seek(0)
     curses.getwin(f)
-    f.close()
+    fx.close()
 
     curses.halfdelay(1)
     curses.intrflush(1)
@@ -289,7 +294,11 @@
             raise AssertionError("%r != %r" % (read, ch))
 
 def test_issue10570():
-    b = curses.tparm(curses.tigetstr("cup"), 5, 3)
+    cap = curses.tigetstr("cup")
+    # return if cup capability is not supported
+    if cap is None:
+        return
+    b = curses.tparm(cap, 5, 3)
     assert type(b) is bytes
     curses.putp(b)
 
diff -urN a-3.3.0/Lib/test/test_os.py b-3.3.0/Lib/test/test_os.py
--- a-3.3.0/Lib/test/test_os.py	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Lib/test/test_os.py	Fri Nov 16 22:45:42 2012
@@ -461,7 +461,11 @@
 
             def test_large_time(self):
                 t1 = 5000000000 # some day in 2128
-                os.utime(self.fname, (t1, t1))
+                try:
+                    #Note fail if time_t is 32 bit
+                    os.utime(self.fname, (t1, t1))
+                except OverflowError:
+                    self.skipTest("requires at least 64-bit time_t")
                 self.assertEqual(os.stat(self.fname).st_mtime, t1)
 
         def test_1686475(self):
diff -urN a-3.3.0/Lib/test/test_sundry.py b-3.3.0/Lib/test/test_sundry.py
--- a-3.3.0/Lib/test/test_sundry.py	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Lib/test/test_sundry.py	Fri Nov 16 22:45:42 2012
@@ -22,7 +22,11 @@
 
             import distutils.command.bdist_dumb
             if sys.platform.startswith('win'):
-                import distutils.command.bdist_msi
+                try:
+                    import distutils.command.bdist_msi # if msi module is not build
+                except ImportError:
+                    if support.verbose:
+                        print("skipping bdist_msi")
             import distutils.command.bdist
             import distutils.command.bdist_rpm
             import distutils.command.bdist_wininst
diff -urN a-3.3.0/Lib/test/test_sysconfig.py b-3.3.0/Lib/test/test_sysconfig.py
--- a-3.3.0/Lib/test/test_sysconfig.py	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Lib/test/test_sysconfig.py	Fri Nov 16 22:45:42 2012
@@ -288,12 +288,13 @@
             _main()
         self.assertTrue(len(output.getvalue().split('\n')) > 0)
 
-    @unittest.skipIf(sys.platform == "win32", "Does not apply to Windows")
-    def test_ldshared_value(self):
-        ldflags = sysconfig.get_config_var('LDFLAGS')
-        ldshared = sysconfig.get_config_var('LDSHARED')
-
-        self.assertIn(ldflags, ldshared)
+    # NOTE: the test bellow is bogus. Also "Does not apply to MSVC" only !
+    #@unittest.skipIf(sys.platform == "win32", "Does not apply to Windows")
+    #def test_ldshared_value(self):
+    #    ldflags = sysconfig.get_config_var('LDFLAGS')
+    #    ldshared = sysconfig.get_config_var('LDSHARED')
+    #
+    #    self.assertIn(ldflags, ldshared)
 
     @unittest.skipUnless(sys.platform == "darwin", "test only relevant on MacOSX")
     def test_platform_in_subprocess(self):
@@ -371,9 +372,9 @@
 
 
 class MakefileTests(unittest.TestCase):
-
-    @unittest.skipIf(sys.platform.startswith('win'),
-                     'Test is not Windows compatible')
+    # GCC(mingw) use posix build system
+    @unittest.skipIf(sys.platform.startswith('win') and sys.version.find('GCC') < 0,
+                     'Test is not MSVC compatible')
     def test_get_makefile_filename(self):
         makefile = sysconfig.get_makefile_filename()
         self.assertTrue(os.path.isfile(makefile), makefile)
diff -urN a-3.3.0/Makefile.pre.in b-3.3.0/Makefile.pre.in
--- a-3.3.0/Makefile.pre.in	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Makefile.pre.in	Fri Nov 16 22:45:42 2012
@@ -209,7 +209,7 @@
 # Modules
 MODULE_OBJS=	\
 		Modules/config.o \
-		Modules/getpath.o \
+		@MODULE_GETPATH@ \
 		Modules/main.o \
 		Modules/gcmodule.o
 
@@ -329,7 +329,7 @@
 		Python/codecs.o \
 		Python/dynamic_annotations.o \
 		Python/errors.o \
-		Python/frozenmain.o \
+		@PYTHON_OBJS_FROZENMAIN@ \
 		Python/future.o \
 		Python/getargs.o \
 		Python/getcompiler.o \
@@ -432,7 +432,7 @@
 
 # Default target
 all:		build_all
-build_all:	$(BUILDPYTHON) $(SYSCONFIGDATA) oldsharedmods sharedmods gdbhooks Modules/_testembed
+build_all:	$(BUILDPYTHON) $(SYSCONFIGDATA) oldsharedmods sharedmods gdbhooks _testembed$(EXE)
 
 # Compile a binary with gcc profile guided optimization.
 profile-opt:
@@ -477,7 +477,7 @@
 sharedmods: $(BUILDPYTHON) $(SYSCONFIGDATA)
 	case $$MAKEFLAGS in *s*) quiet=-q; esac; \
 	$(RUNSHARED) CC='$(CC)' LDSHARED='$(BLDSHARED)' OPT='$(OPT)' \
-		$(PYTHON_FOR_BUILD) $(srcdir)/setup.py $$quiet build
+		$(PYTHON_FOR_BUILD) $(srcdir)/setup.py $$quiet build @PYMOD_BUILDOPT@
 
 # Build static library
 # avoid long command lines, same as LIBRARY_OBJS
@@ -542,9 +542,9 @@
 	$(LN) -fsn Versions/Current/$(PYTHONFRAMEWORK) $(PYTHONFRAMEWORKDIR)/$(PYTHONFRAMEWORK)
 	$(LN) -fsn Versions/Current/Resources $(PYTHONFRAMEWORKDIR)/Resources
 
-# This rule builds the Cygwin Python DLL and import library if configured
+# This rule builds the Python DLL and import library if configured
 # for a shared core library; otherwise, this rule is a noop.
-$(DLLLIBRARY) libpython$(VERSION).dll.a: $(LIBRARY_OBJS)
+$(DLLLIBRARY) libpython$(LDVERSION).dll.a: $(LIBRARY_OBJS)
 	if test -n "$(DLLLIBRARY)"; then \
 		$(LDSHARED) -Wl,--out-implib=$@ -o $(DLLLIBRARY) $^ \
 			$(LIBS) $(MODLIBS) $(SYSLIBS) $(LDLAST); \
@@ -555,6 +555,10 @@
 oldsharedmods: $(SHAREDMODS)
 
 
+setup_info: setup_info.in config.status
+	$(SHELL) ./config.status $@
+
+
 Makefile Modules/config.c: Makefile.pre \
 				$(srcdir)/Modules/config.c.in \
 				$(MAKESETUP) \
@@ -580,7 +584,7 @@
 		echo "-----------------------------------------------"; \
 	fi
 
-Modules/_testembed: Modules/_testembed.o $(LIBRARY) $(LDLIBRARY) $(PY3LIBRARY)
+_testembed$(EXE): Modules/_testembed.o $(LIBRARY) $(LDLIBRARY) $(PY3LIBRARY)
 	$(LINKCC) $(PY_LDFLAGS) $(LINKFORSHARED) -o $@ Modules/_testembed.o $(BLDLIBRARY) $(LIBS) $(MODLIBS) $(SYSLIBS) $(LDLAST)
 
 ############################################################################
@@ -611,6 +615,7 @@
 	      -DHGBRANCH="\"`LC_ALL=C $(HGBRANCH)`\"" \
 	      -o $@ $(srcdir)/Modules/getbuildinfo.c
 
+# default sys.path calculations
 Modules/getpath.o: $(srcdir)/Modules/getpath.c Makefile
 	$(CC) -c $(PY_CORE_CFLAGS) -DPYTHONPATH='"$(PYTHONPATH)"' \
 		-DPREFIX='"$(prefix)"' \
@@ -619,6 +624,10 @@
 		-DVPATH='"$(VPATH)"' \
 		-o $@ $(srcdir)/Modules/getpath.c
 
+# default sys.path calculations for windows platforms
+PC/getpathp.o: $(srcdir)/PC/getpathp.c
+	$(MAINCC) -c $(PY_CORE_CFLAGS) -o $@ $(srcdir)/PC/getpathp.c
+
 Modules/python.o: $(srcdir)/Modules/python.c
 	$(MAINCC) -c $(PY_CORE_CFLAGS) -o $@ $(srcdir)/Modules/python.c
 
@@ -1347,7 +1356,7 @@
 	find build -name 'fficonfig.py' -exec rm -f {} ';' || true
 	-rm -f Lib/lib2to3/*Grammar*.pickle
 	-rm -f $(SYSCONFIGDATA)
-	-rm -f Modules/_testembed Modules/_freeze_importlib
+	-rm -f _testembed$(EXE) Modules/_freeze_importlib
 
 profile-removal:
 	find . -name '*.gc??' -exec rm -f {} ';'
diff -urN a-3.3.0/Modules/Setup.config.in b-3.3.0/Modules/Setup.config.in
--- a-3.3.0/Modules/Setup.config.in	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/Setup.config.in	Fri Nov 16 22:45:42 2012
@@ -3,11 +3,19 @@
 # The purpose of this file is to conditionally enable certain modules
 # based on configure-time options.
 
+# init system calls(posix/nt/...) for INITFUNC (used by makesetup)
+@INITSYS@ posixmodule.c
+
 # Threading
 @USE_THREAD_MODULE@_thread _threadmodule.c
 
 # The signal module
 @USE_SIGNAL_MODULE@signal signalmodule.c
+
+# On win32 host(mingw build in MSYS environment) show that site.py
+# fail to load if some modules are not build-in:
+@BUILDIN_WIN32_MODULE@winreg ../PC/winreg.c
+
 
 # The rest of the modules previously listed in this file are built
 # by the setup.py script in Python 2.1 and later.
diff -urN a-3.3.0/Modules/Setup.dist b-3.3.0/Modules/Setup.dist
--- a-3.3.0/Modules/Setup.dist	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/Setup.dist	Fri Nov 16 22:45:42 2012
@@ -105,9 +105,10 @@
 # This only contains the minimal set of modules required to run the 
 # setup.py script in the root of the Python source tree.
 
-posix posixmodule.c		# posix (UNIX) system calls
 errno errnomodule.c		# posix (UNIX) errno values
-pwd pwdmodule.c			# this is needed to find out the user's home dir
+#FIXME: setup.py detect this module along with grp and spwd.
+#FIXME: what about to comment ?
+#pwd pwdmodule.c			# this is needed to find out the user's home dir
 				# if $HOME is not set
 _sre _sre.c			# Fredrik Lundh's new regular expressions
 _codecs _codecsmodule.c		# access to the builtin codecs and codec registry
diff -urN a-3.3.0/Modules/_ctypes/_ctypes.c b-3.3.0/Modules/_ctypes/_ctypes.c
--- a-3.3.0/Modules/_ctypes/_ctypes.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_ctypes/_ctypes.c	Fri Nov 16 22:45:42 2012
@@ -3058,8 +3058,24 @@
     mangled_name = alloca(strlen(name) + 1 + 1 + 1 + 3); /* \0 _ @ %d */
     if (!mangled_name)
         return NULL;
+    /* FIXME: for stdcall decorated export functions MSVC compiler add
+     * underscore, but GCC compiler create them without.
+     * As well functions from system libraries are without underscore.
+     * This is visible by example for _ctypes_test.pyd module.
+     * Solutions:
+     * - If a python module is build with gcc option --add-stdcall-alias
+     * the module will contain XXX as alias for function XXX@ as result
+     * first search in this method will succeed.
+     * - Distutil may use compiler to create def-file, to modify it as
+     * add underscore alias and with new def file to create module.
+     * - Or may be just to search for function without underscore.
+     */
     for (i = 0; i < 32; ++i) {
         sprintf(mangled_name, "_%s@%d", name, i*4);
+        address = (PPROC)GetProcAddress(handle, mangled_name);
+        if (address)
+            return address;
+        sprintf(mangled_name, "%s@%d", name, i*4);
         address = (PPROC)GetProcAddress(handle, mangled_name);
         if (address)
             return address;
diff -urN a-3.3.0/Modules/_ctypes/libffi_msvc/win32.S b-3.3.0/Modules/_ctypes/libffi_msvc/win32.S
--- a-3.3.0/Modules/_ctypes/libffi_msvc/win32.S	Thu Jan  1 00:00:00 1970
+++ b-3.3.0/Modules/_ctypes/libffi_msvc/win32.S	Fri Nov 16 22:45:42 2012
@@ -0,0 +1,154 @@
+/* -----------------------------------------------------------------------
+   win32.S - Copyright (c) 1996, 1998, 2001, 2002  Red Hat, Inc.
+	     Copyright (c) 2001  John Beniton
+	     Copyright (c) 2002  Ranjit Mathew
+			
+ 
+   X86 Foreign Function Interface
+ 
+   Permission is hereby granted, free of charge, to any person obtaining
+   a copy of this software and associated documentation files (the
+   ``Software''), to deal in the Software without restriction, including
+   without limitation the rights to use, copy, modify, merge, publish,
+   distribute, sublicense, and/or sell copies of the Software, and to
+   permit persons to whom the Software is furnished to do so, subject to
+   the following conditions:
+ 
+   The above copyright notice and this permission notice shall be included
+   in all copies or substantial portions of the Software.
+ 
+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+   OTHER DEALINGS IN THE SOFTWARE.
+   ----------------------------------------------------------------------- */
+ 
+#define LIBFFI_ASM
+#include <fficonfig.h>
+#include <ffi.h>
+ 
+.text
+ 
+.globl ffi_prep_args
+ 
+        # This assumes we are using gas.
+        .balign 16
+.globl _ffi_call_x86
+ 
+_ffi_call_x86:
+        pushl %ebp
+        movl  %esp,%ebp
+
+	#THe: save previous %esi, and store the current stack pointer in %esi
+	pushl %esi
+	movl %esp,%esi
+
+        # Make room for all of the new args.
+        movl  16(%ebp),%ecx                                                     
+        subl  %ecx,%esp
+ 
+        movl  %esp,%eax
+ 
+        # Place all of the ffi_prep_args in position
+        pushl 12(%ebp)
+        pushl %eax
+        call  *8(%ebp)
+ 
+        # Return stack to previous state and call the function
+        addl  $8,%esp
+ 
+        # FIXME: Align the stack to a 128-bit boundary to avoid
+        # potential performance hits.
+
+	call  *28(%ebp)
+ 
+	# Load ecif->cif->abi
+#masm#	mov ecx, [ebp + 12]
+        movl  12(%ebp),%ecx
+#masm#	mov ecx, [ecx]ecif.cif
+	movl  (%ecx),%ecx
+#masm#	mov ecx, [ecx]ecif.cif.abi
+	movl  (%ecx),%ecx
+#masm#	cmp ecx, FFI_STDCALL
+        cmpl  $2,%ecx
+        je   noclean
+
+	# STDCALL: Remove the space we pushed for the args
+        movl  16(%ebp),%ecx
+        addl  %ecx,%esp
+
+	# CDECL: Caller has already cleaned the stack
+noclean:
+	# Check that esp has the same value as before!
+	sub %esp,%esi # calculate stack pointer difference
+
+        # Load %ecx with the return type code
+        movl  20(%ebp),%ecx
+ 
+        # If the return value pointer is NULL, assume no return value.
+        cmpl  $0,24(%ebp)
+        jne   retint
+ 
+        # Even if there is no space for the return value, we are
+        # obliged to handle floating-point values.
+        cmpl  $FFI_TYPE_FLOAT,%ecx
+        jne   noretval
+        fstp  %st(0)
+ 
+        jmp   epilogue
+ 
+retint:
+        cmpl  $FFI_TYPE_INT,%ecx
+        jne   retfloat
+        # Load %ecx with the pointer to storage for the return value
+        movl  24(%ebp),%ecx
+        movl  %eax,0(%ecx)
+        jmp   epilogue
+ 
+retfloat:
+        cmpl  $FFI_TYPE_FLOAT,%ecx
+        jne   retdouble   
+         # Load %ecx with the pointer to storage for the return value
+        movl  24(%ebp),%ecx
+        fstps (%ecx)
+        jmp   epilogue
+ 
+retdouble:
+        cmpl  $FFI_TYPE_DOUBLE,%ecx
+        jne   retlongdouble
+        # Load %ecx with the pointer to storage for the return value
+        movl  24(%ebp),%ecx
+        fstpl (%ecx)
+        jmp   epilogue
+ 
+retlongdouble:
+        cmpl  $FFI_TYPE_LONGDOUBLE,%ecx
+        jne   retint64
+        # Load %ecx with the pointer to storage for the return value
+        movl  24(%ebp),%ecx
+        fstpt (%ecx)
+        jmp   epilogue
+ 
+retint64:
+        cmpl  $FFI_TYPE_SINT64,%ecx
+        jne   retstruct
+        # Load %ecx with the pointer to storage for the return value
+        movl  24(%ebp),%ecx
+        movl  %eax,0(%ecx)
+        movl  %edx,4(%ecx)
+ 
+retstruct:
+        # Nothing to do!
+ 
+noretval:
+epilogue:
+	movl %esi,%eax # return the stack pointer detlta in %eax
+	popl %esi # restore previous %esi
+        movl %ebp,%esp
+        popl %ebp
+        ret
+ 
+.ffi_call_x86_end:
diff -urN a-3.3.0/Modules/_cursesmodule.c b-3.3.0/Modules/_cursesmodule.c
--- a-3.3.0/Modules/_cursesmodule.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_cursesmodule.c	Fri Nov 16 22:45:42 2012
@@ -125,6 +125,10 @@
 #include <langinfo.h>
 #endif
 
+#ifdef __MINGW32__
+#include <windows.h>
+#endif
+
 #if !defined(HAVE_NCURSES_H) && (defined(sgi) || defined(__sun) || defined(SCO5))
 #define STRICT_SYSV_CURSES       /* Don't use ncurses extensions */
 typedef chtype attr_t;           /* No attr_t type is available */
@@ -1693,17 +1697,31 @@
     /* We have to simulate this by writing to a temporary FILE*,
        then reading back, then writing to the argument stream. */
     char fn[100];
+#ifndef MS_WINDOWS
     int fd;
+#endif
     FILE *fp;
     PyObject *res;
 
+#ifndef MS_WINDOWS
+/* Even on unix /tmp may not exist and the program must prefer $TMPDIR ! */
     strcpy(fn, "/tmp/py.curses.putwin.XXXXXX");
     fd = mkstemp(fn);
     if (fd < 0)
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     fp = fdopen(fd, "wb+");
+#else
+    strcpy(fn, "py.curses.putwin.XXXXXX");
+    _mktemp(fn);
+    if (*fn == 0)
+        return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
+    fp = fopen(fn, "wb+");
+#endif
+
     if (fp == NULL) {
+    #ifndef MS_WINDOWS
         close(fd);
+    #endif
         remove(fn);
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     }
@@ -2250,7 +2268,9 @@
 PyCurses_GetWin(PyCursesWindowObject *self, PyObject *stream)
 {
     char fn[100];
+#ifndef MS_WINDOWS
     int fd;
+#endif
     FILE *fp;
     PyObject *data;
     size_t datalen;
@@ -2259,13 +2279,24 @@
     PyCursesInitialised;
     _Py_IDENTIFIER(read);
 
+#ifndef MS_WINDOWS
+/* Even on unix /tmp may not exist and the program must prefer $TMPDIR ! */
     strcpy(fn, "/tmp/py.curses.getwin.XXXXXX");
     fd = mkstemp(fn);
     if (fd < 0)
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     fp = fdopen(fd, "wb+");
+#else
+    strcpy(fn, "py.curses.getwin.XXXXXX");
+    _mktemp(fn);
+    if (*fn == 0)
+        return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
+    fp = fopen(fn, "wb+");
+#endif
     if (fp == NULL) {
+    #ifndef MS_WINDOWS
         close(fd);
+    #endif
         remove(fn);
         return PyErr_SetFromErrnoWithFilename(PyExc_IOError, fn);
     }
diff -urN a-3.3.0/Modules/_freeze_importlib.c b-3.3.0/Modules/_freeze_importlib.c
--- a-3.3.0/Modules/_freeze_importlib.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_freeze_importlib.c	Fri Nov 16 22:45:43 2012
@@ -21,8 +21,8 @@
     {0, 0, 0} /* sentinel */
 };
 
-#ifndef MS_WINDOWS
-/* On Windows, this links with the regular pythonXY.dll, so this variable comes
+#ifndef _MSC_VER
+/* On MSVC, this links with the regular pythonXY.dll, so this variable comes
    from frozen.obj. In the Makefile, frozen.o is not linked into this executable,
    so we define the variable here. */
 struct _frozen *PyImport_FrozenModules;
diff -urN a-3.3.0/Modules/_io/fileio.c b-3.3.0/Modules/_io/fileio.c
--- a-3.3.0/Modules/_io/fileio.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_io/fileio.c	Fri Nov 16 22:45:43 2012
@@ -30,7 +30,9 @@
 
 #ifdef MS_WINDOWS
 /* can simulate truncate with Win32 API functions; see file_truncate */
+#ifndef HAVE_FTRUNCATE
 #define HAVE_FTRUNCATE
+#endif
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
diff -urN a-3.3.0/Modules/_localemodule.c b-3.3.0/Modules/_localemodule.c
--- a-3.3.0/Modules/_localemodule.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_localemodule.c	Fri Nov 16 22:45:43 2012
@@ -11,6 +11,13 @@
 
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
+#ifdef __MINGW32__
+/* The header libintl.h and library libintl may exist on mingw host.
+ * To be compatible with MSVC build we has to undef some defines.
+ */
+#undef HAVE_LIBINTL_H
+#undef HAVE_BIND_TEXTDOMAIN_CODESET
+#endif
 
 #include <stdio.h>
 #include <locale.h>
diff -urN a-3.3.0/Modules/_math.c b-3.3.0/Modules/_math.c
--- a-3.3.0/Modules/_math.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_math.c	Fri Nov 16 22:45:43 2012
@@ -5,6 +5,29 @@
 #include <float.h>
 #include "_math.h"
 
+#if defined(__MINGW32__)
+#  define USE_MINGWEX_MATH
+#endif
+
+#ifdef USE_MINGWEX_MATH
+/* To avoid problems with many MSVCRT implementations we will
+ * use a work-around
+ */
+#define MAXLOG 7.09782712893383996843E2
+#define MINLOG -7.45133219101941108420E2
+
+static double fake_exp (double x) {
+  if (isnan(x)) { return(x); }
+  if (isinf(x)) { return(x > 0.0 ? x : 0.0); }
+  if (x > MAXLOG) { errno = ERANGE; return(INFINITY); }
+/* the correct code is to set ERANGE but why windows build bot don't fail ? */
+  if (x < MINLOG) { errno = ERANGE; return(0.0); }
+
+  return(exp(x));
+}
+#define exp	fake_exp
+#endif /*def USE_MINGWEX_MATH*/
+
 /* The following copyright notice applies to the original
    implementations of acosh, asinh and atanh. */
 
@@ -179,9 +202,28 @@
         if (u == 1.0)
             return x;
         else
+#if 0
             return (u - 1.0) * x / log(u);
+#else
+        {   /* avoid precision error */
+            double r;
+            r = x / log(u);
+            return((u - 1.0) * r);
+        }
+#endif
     }
     else
+#ifdef USE_MINGWEX_MATH
+/* to avoid errors with correct fake_exp:
+  expm10211:expm1(-1420.0): expected -1.0, got 'OverflowError'
+  expm10212:expm1(-1450.0): expected -1.0, got 'OverflowError'
+  expm10213:expm1(-1500.0): expected -1.0, got 'OverflowError'
+  expm10214:expm1(-1e+50): expected -1.0, got 'OverflowError'
+  expm10215:expm1(-1.79e+308): expected -1.0, got 'OverflowError'
+*/
+        if (x < MINLOG) { return(-1.0); }
+        else
+#endif
         return exp(x) - 1.0;
 }
 
diff -urN a-3.3.0/Modules/_multiprocessing/multiprocessing.c b-3.3.0/Modules/_multiprocessing/multiprocessing.c
--- a-3.3.0/Modules/_multiprocessing/multiprocessing.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_multiprocessing/multiprocessing.c	Fri Nov 16 22:45:43 2012
@@ -200,6 +200,12 @@
         Py_DECREF(temp); Py_DECREF(value); return NULL; }         \
     Py_DECREF(value)
 
+#ifndef MS_WINDOWS
+/* GCC(mingw) 4.4+ require and use posix threads(pthreads-w32)
+ * Also system may contain installed pthreads-w32.
+ * As multiprocessing is based on windows methods we must
+ * comment all those flags
+ */
 #if defined(HAVE_SEM_OPEN) && !defined(POSIX_SEMAPHORES_NOT_ENABLED)
     ADD_FLAG(HAVE_SEM_OPEN);
 #endif
@@ -210,8 +216,10 @@
     ADD_FLAG(HAVE_BROKEN_SEM_GETVALUE);
 #endif
 #ifdef HAVE_BROKEN_SEM_UNLINK
+/* FIXME: why use this? Note before was for cygwin and darwin ? */
     ADD_FLAG(HAVE_BROKEN_SEM_UNLINK);
 #endif
+#endif /*ndef MS_WINDOWS*/
 
     if (PyModule_AddObject(module, "flags", temp) < 0)
         return NULL;
diff -urN a-3.3.0/Modules/_winapi.c b-3.3.0/Modules/_winapi.c
--- a-3.3.0/Modules/_winapi.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Modules/_winapi.c	Fri Nov 16 22:45:43 2012
@@ -39,7 +39,20 @@
 
 #define WINDOWS_LEAN_AND_MEAN
 #include "windows.h"
+#ifdef _MSC_VER
+# define HAVE_CRTDBG_H
+#endif
+#ifdef HAVE_CRTDBG_H
 #include <crtdbg.h>
+#endif
+
+#ifndef FILE_FLAG_FIRST_PIPE_INSTANCE
+/* require _WIN32_WINNT >= 0x0500
+ * MSDN Note - Windows 2000:
+ *  This flag is not supported until Windows 2000 SP2 and Windows XP.
+ */
+#define FILE_FLAG_FIRST_PIPE_INSTANCE	0x00080000
+#endif
 
 #if defined(MS_WIN32) && !defined(MS_WIN64)
 #define HANDLE_TO_PYNUM(handle) \
diff -urN a-3.3.0/Modules/faulthandler.c b-3.3.0/Modules/faulthandler.c
--- a-3.3.0/Modules/faulthandler.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/faulthandler.c	Fri Nov 16 22:45:42 2012
@@ -857,10 +857,23 @@
 static PyObject *
 faulthandler_sigabrt(PyObject *self, PyObject *args)
 {
-#ifdef _MSC_VER
-    /* Visual Studio: configure abort() to not display an error message nor
+#ifdef MS_WINDOWS
+    /* configure abort() to not display an error message nor
        open a popup asking to report the fault. */
+#if defined(__MINGW32__) && !defined(HAVE_REPARSE_DATA_BUFFER) && __MSVCRT_VERSION__ < 0x0900
+    /* NOTE for mingw* build:
+       - mingw w32api define _WRITE_ABORT_MSG and function
+         _set_abort_behavior(..) if CRT >= 8.0
+       - mingw-w64 api define _WRITE_ABORT_MSG unconditionaly(!)
+         but function is available in CRT >= 9
+       - we use HAVE_REPARSE_DATA_BUFFER to distinguish
+         between both api (ref to configure&posixmodue.c)
+     */
+# undef _WRITE_ABORT_MSG
+#endif
+#ifdef _WRITE_ABORT_MSG
     _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);
+#endif
 #endif
     abort();
     Py_RETURN_NONE;
diff -urN a-3.3.0/Modules/getaddrinfo.c b-3.3.0/Modules/getaddrinfo.c
--- a-3.3.0/Modules/getaddrinfo.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/getaddrinfo.c	Fri Nov 16 22:45:42 2012
@@ -232,6 +232,9 @@
     return YES;
 }
 
+#ifndef EAI_BADHINTS
+#  define EAI_BADHINTS EAI_BADFLAGS
+#endif
 int
 getaddrinfo(const char*hostname, const char*servname,
             const struct addrinfo *hints, struct addrinfo **res)
diff -urN a-3.3.0/Modules/getnameinfo.c b-3.3.0/Modules/getnameinfo.c
--- a-3.3.0/Modules/getnameinfo.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/getnameinfo.c	Fri Nov 16 22:45:42 2012
@@ -48,6 +48,14 @@
 #include "addrinfo.h"
 #endif
 
+#ifndef IN_EXPERIMENTAL
+#define IN_EXPERIMENTAL(i)  (((i) & 0xe0000000U) == 0xe0000000U)
+#endif
+
+#ifndef IN_LOOPBACKNET
+#define IN_LOOPBACKNET	    127
+#endif
+
 #define SUCCESS 0
 #define YES 1
 #define NO  0
diff -urN a-3.3.0/Modules/mathmodule.c b-3.3.0/Modules/mathmodule.c
--- a-3.3.0/Modules/mathmodule.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/mathmodule.c	Fri Nov 16 22:45:42 2012
@@ -55,6 +55,30 @@
 #include "Python.h"
 #include "_math.h"
 
+#if defined(__MINGW32__)
+#  define USE_MINGWEX_MATH
+#endif
+
+#ifdef USE_MINGWEX_MATH
+/* Since ldexp() is broken on many MSVCRT implementations and mingwex
+ * library provide a long double version we will use it as work-around.
+ * As example broken ldexp return for ldexp(1., INT_MAX) 0(zero) instead inf.
+ * With this work-around math test testLdexp pass.
+ */
+static double fake_ldexp (double x, int expn) { return ldexpl (x, expn); }
+#define ldexp	fake_ldexp
+
+/* Since pow() is broken on many MSVCRT implementations and library
+ * mingwex provide a long double version we will use it as work-around.
+ * As example broken pow return for pow(132.97585637020967, 126.95117632943295)
+ * 4.1252919849060512e+269 instead 4.1252919849057403e+269.
+ * With this work-around math test test_mtestfile pass for gamma.
+ */
+static double fake_pow (double x, double y) { return powl (x, y); }
+#define pow	fake_pow
+
+#endif /*def USE_MINGWEX_MATH*/
+
 /*
    sin(pi*x), giving accurate results for all finite x (especially x
    integral or close to an integer).  This is here for use in the
diff -urN a-3.3.0/Modules/posixmodule.c b-3.3.0/Modules/posixmodule.c
--- a-3.3.0/Modules/posixmodule.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/posixmodule.c	Fri Nov 16 22:45:42 2012
@@ -175,6 +175,23 @@
 #define HAVE_CWAIT      1
 #define HAVE_FSYNC      1
 #define fsync _commit
+#elif defined(__MINGW32__)	/* GCC (mingw special) compiler */
+/*#define HAVE_GETCWD	1 - detected by configure*/
+#define HAVE_SPAWNV	1
+/*#define HAVE_EXECV	1 - detected by configure*/
+#define HAVE_PIPE	1
+#define HAVE_POPEN	1
+#define HAVE_SYSTEM	1
+#define HAVE_CWAIT	1
+#define HAVE_FSYNC	1
+#undef HAVE_FTRUNCATE	/* mingw implement it as _chsize. undef to be compatible */
+#undef HAVE_TRUNCATE	/* mingw-w64 implement it. undef to be compatible */
+#define fsync _commit
+#include <windows.h>
+#include <winioctl.h>
+#ifndef _MAX_ENV
+#define _MAX_ENV	32767
+#endif
 #else
 #if defined(PYOS_OS2) && defined(PYCC_GCC) || defined(__VMS)
 /* Everything needed is defined in PC/os2emx/pyconfig.h or vms/pyconfig.h */
@@ -302,7 +319,7 @@
 #endif
 #endif
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__)
 #ifdef HAVE_DIRECT_H
 #include <direct.h>
 #endif
@@ -887,6 +904,15 @@
    http://msdn.microsoft.com/en-us/library/ms791514.aspx as the required
    include doesn't seem to be present in the Windows SDK (at least as included
    with Visual Studio Express). */
+#ifndef HAVE_REPARSE_DATA_BUFFER
+/*
+ * REPARSE_DATA_BUFFER is defined in <winnt.h> on mingw.org w32api
+ * instead as is documented in <ntifs.h>. The mingw-w64 API define
+ * it in <ddk/ntifs.h> but we can not include as header like
+ * <ntddk.h> is required instead <ddk/ntddk.h>, i.e. to use mingw-w64
+ * headers user must specify explicitly path to ddk :(.
+ * So lest check at configure time and use MSC hack if not found.
+ */
 typedef struct _REPARSE_DATA_BUFFER {
     ULONG ReparseTag;
     USHORT ReparseDataLength;
@@ -917,7 +943,10 @@
 
 #define REPARSE_DATA_BUFFER_HEADER_SIZE  FIELD_OFFSET(REPARSE_DATA_BUFFER,\
                                                       GenericReparseBuffer)
+#ifndef MAXIMUM_REPARSE_DATA_BUFFER_SIZE
 #define MAXIMUM_REPARSE_DATA_BUFFER_SIZE  ( 16 * 1024 )
+#endif
+#endif /*ndef HAVE_REPARSE_DATA_BUFFER*/
 
 static int
 win32_get_reparse_tag(HANDLE reparse_point_handle, ULONG *reparse_tag)
@@ -950,7 +979,7 @@
 */
 #include <crt_externs.h>
 static char **environ;
-#elif !defined(_MSC_VER) && ( !defined(__WATCOMC__) || defined(__QNX__) )
+#elif !defined(_MSC_VER) && !defined(__MINGW32__) && ( !defined(__WATCOMC__) || defined(__QNX__) )
 extern char **environ;
 #endif /* !_MSC_VER */
 
@@ -1271,7 +1300,7 @@
 static PyObject*
 win32_1str(PyObject* args, char* func,
            char* format, BOOL (__stdcall *funcA)(LPCSTR),
-           char* wformat, BOOL (__stdcall *funcW)(LPWSTR))
+           char* wformat, BOOL (__stdcall *funcW)(LPCWSTR))
 {
     PyObject *uni;
     const char *ansi;
@@ -1398,7 +1427,7 @@
     int st_ctime_nsec;
 };
 
-static __int64 secs_between_epochs = 11644473600; /* Seconds between 1.1.1601 and 1.1.1970 */
+static __int64 secs_between_epochs = Py_LL(11644473600); /* Seconds between 1.1.1601 and 1.1.1970 */
 
 static void
 FILE_TIME_to_time_t_nsec(FILETIME *in_ptr, time_t *time_out, int* nsec_out)
@@ -3697,7 +3726,6 @@
 } /* end of posix__getfullpathname */
 
 
-
 /* A helper function for samepath on windows */
 static PyObject *
 posix__getfinalpathname(PyObject *self, PyObject *args)
@@ -11630,7 +11658,7 @@
 }
 
 
-#if (defined(_MSC_VER) || defined(__WATCOMC__) || defined(__BORLANDC__)) && !defined(__QNX__)
+#if (defined(_MSC_VER) || defined (__MINGW32__) || defined(__WATCOMC__) || defined(__BORLANDC__)) && !defined(__QNX__)
 #define INITFUNC PyInit_nt
 #define MODNAME "nt"
 
diff -urN a-3.3.0/Modules/python.c b-3.3.0/Modules/python.c
--- a-3.3.0/Modules/python.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/python.c	Fri Nov 16 22:45:42 2012
@@ -7,7 +7,7 @@
 #include <floatingpoint.h>
 #endif
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(__MINGW32__)
 int
 wmain(int argc, wchar_t **argv)
 {
diff -urN a-3.3.0/Modules/readline.c b-3.3.0/Modules/readline.c
--- a-3.3.0/Modules/readline.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/readline.c	Fri Nov 16 22:45:42 2012
@@ -11,6 +11,11 @@
 #include <errno.h>
 #include <sys/time.h>
 
+#ifdef MS_WINDOWS
+/* on windows select don't work on files */
+#undef HAVE_SELECT
+#endif
+
 #if defined(HAVE_SETLOCALE)
 /* GNU readline() mistakenly sets the LC_CTYPE locale.
  * This is evil.  Only the user or the app's main() should do this!
@@ -905,6 +910,10 @@
     /* Allow $if term= in .inputrc to work */
     rl_terminal_name = getenv("TERM");
 #endif
+#ifdef MS_WINDOWS
+    /* FIXME: need more test before to skip this hack */
+    rl_terminal_name = "dumb";
+#endif
     /* Force rebind of TAB to insert-tab */
     rl_bind_key('\t', rl_insert);
     /* Bind both ESC-TAB and ESC-ESC to the completion function */
@@ -1176,7 +1185,10 @@
 
 
 
+#ifndef MS_WINDOWS
+    /* FIXME: windows readline(prompt) may not work ? */
     PyOS_ReadlineFunctionPointer = call_readline;
+#endif
     setup_readline();
     return m;
 }
diff -urN a-3.3.0/Modules/selectmodule.c b-3.3.0/Modules/selectmodule.c
--- a-3.3.0/Modules/selectmodule.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/selectmodule.c	Fri Nov 16 22:45:42 2012
@@ -113,9 +113,9 @@
         v = PyObject_AsFileDescriptor( o );
         if (v == -1) goto finally;
 
-#if defined(_MSC_VER)
+#if defined(MS_WIN32)
         max = 0;                             /* not used for Win32 */
-#else  /* !_MSC_VER */
+#else  /* !MS_WIN32 */
         if (!_PyIsSelectable_fd(v)) {
             PyErr_SetString(PyExc_ValueError,
                         "filedescriptor out of range in select()");
@@ -123,7 +123,7 @@
         }
         if (v > max)
             max = v;
-#endif /* _MSC_VER */
+#endif /* MS_WIN32 */
         FD_SET(v, set);
 
         /* add object and its file descriptor to the list */
diff -urN a-3.3.0/Modules/signalmodule.c b-3.3.0/Modules/signalmodule.c
--- a-3.3.0/Modules/signalmodule.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/signalmodule.c	Fri Nov 16 22:45:42 2012
@@ -5,8 +5,29 @@
 
 #include "Python.h"
 
+#ifdef __MINGW32__
+/* GCC 4.4+ (mingw) support posix threads!
+  Note: macro __MINGW_GCC is defined for GCC 4.4+ but
+  not for GCC 3.4.5 (last stable from 3.x )
+  Instead to use __MINGW_GCC we will use more common
+  __MINGW32__ to prevent case when in GCC 3.4.5 build
+  envirionment is installed posix thread package.
+ */
+# undef HAVE_PTHREAD_KILL
+#endif
+
+#if defined(__CYGWIN__)
+/* Type siginfo_t is different on cygwin. For instance si_band is not
+ * a member of structure, so until fill_siginfo(siginfo_t *si) is
+ * ported properly lets "undef" sigwaitinfo and sigtimedwait to
+ * avoid build failure in fill_siginfo(..).
+ */
+# undef HAVE_SIGWAITINFO
+# undef HAVE_SIGTIMEDWAIT
+#endif
+
 #ifdef MS_WINDOWS
-#include <Windows.h>
+#include <windows.h>
 #ifdef HAVE_PROCESS_H
 #include <process.h>
 #endif
diff -urN a-3.3.0/Modules/socketmodule.c b-3.3.0/Modules/socketmodule.c
--- a-3.3.0/Modules/socketmodule.c	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/socketmodule.c	Fri Nov 16 22:45:42 2012
@@ -93,6 +93,15 @@
 #endif
 
 #include "Python.h"
+#ifndef HAVE_GETPEERNAME
+/* FIXME: see comments in configure.in. Also PC/pyconfig.h define it.
+ * Since only this module use getpeername why don't remove declaration
+ * from PC/pyconfig.h and define here if is defined MS_WIN32 ?
+ */
+#ifdef __MINGW32__
+#  define HAVE_GETPEERNAME
+#endif
+#endif /* ndef HAVE_GETPEERNAME */
 #include "structmember.h"
 
 #undef MAX
@@ -324,6 +333,35 @@
   /* Do not include addrinfo.h for MSVC7 or greater. 'addrinfo' and
    * EAI_* constants are defined in (the already included) ws2tcpip.h.
    */
+#elif defined(__MINGW32__)
+/* FIXME: getaddrinfo(HAVE_GETADDRINFO) depend from WINVER
+   TODO: resolve later(see comments in pyport.h) */
+#if 0
+/* To use getaddrinfo/getnameinfo from runtime for version before 0x0501
+   we has to define those functions (see below).
+   In all cases mingw linker succeed to link binaries.
+   If you enable this code the load of module will fail on w2k
+   with message like this one:
+   "The specified procedure could not be found" */
+#  if (_WIN32_WINNT < 0x0501)
+void WSAAPI freeaddrinfo (struct addrinfo*);
+int WSAAPI getaddrinfo (const char*,const char*,const struct addrinfo*,
+		        struct addrinfo**);
+int WSAAPI getnameinfo(const struct sockaddr*,socklen_t,char*,DWORD,
+		       char*,DWORD,int);
+#  endif
+#  define HAVE_GETADDRINFO
+#  define HAVE_GETNAMEINFO
+#else
+#  if (_WIN32_WINNT < 0x0501)
+   /* Internal implemetation that has to work on w2k and latest. */
+#    define EAI_ADDRFAMILY
+#    include "addrinfo.h"
+#  else
+#    define HAVE_GETADDRINFO
+#    define HAVE_GETNAMEINFO
+#  endif
+#endif
 #else
 #  include "addrinfo.h"
 #endif
@@ -361,6 +399,16 @@
 #if !defined(HAVE_GETADDRINFO)
 /* avoid clashes with the C library definition of the symbol. */
 #define getaddrinfo fake_getaddrinfo
+#ifdef __MINGW32__
+#ifdef gai_strerror
+/* NOTE: Mingw w32api always define gai_strerror to gai_strerror{A|W}
+   but getaddrinfo is defined if _WIN32_WINNT >= 0x0501.
+   MSDN say that gai_strerror() exist for w95 and later and
+   getaddrinfo()/getnameinfo() for wxp and later.
+   Since we use fake function to suppress warnign we has to undef. */
+#  undef gai_strerror
+#endif
+#endif /*def __MINGW32__*/
 #define gai_strerror fake_gai_strerror
 #define freeaddrinfo fake_freeaddrinfo
 #include "getaddrinfo.c"
@@ -3729,7 +3777,31 @@
 Shut down the reading side of the socket (flag == SHUT_RD), the writing side\n\
 of the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).");
 
+#ifndef SIO_RCVALL
+#ifdef __MINGW32__
+/* MSDN: SIO_RCVALL defined on w2k and later */
+/* note "Separate SDKs" required for w2k    */
+/* 0x98000001 = _WSAIOW(IOC_VENDOR,1)       */
+#  define SIO_RCVALL	0x98000001
+#  define RCVALL_OFF	0
+#  define RCVALL_ON	1
+   /* NOTE: MSDN - this feature is not implemented */
+#  define RCVALL_SOCKETLEVELONLY	2
+
+/* 0x98000004 = _WSAIOW(IOC_VENDOR,4) */
+#  define SIO_KEEPALIVE_VALS	0x98000004
+struct tcp_keepalive {
+    u_long onoff;
+    u_long keepalivetime;
+    u_long keepaliveinterval;
+};
+#endif /* def __MINGW32__ */
+#endif /* ndef SIO_RCVALL */
+
 #if defined(MS_WINDOWS) && defined(SIO_RCVALL)
+/* If isn't defined test_socket.py fail with:
+AttributeError: type object '_socket.socket' has no attribute 'ioctl'
+*/
 static PyObject*
 sock_ioctl(PySocketSockObject *s, PyObject *arg)
 {
@@ -4067,6 +4139,12 @@
 socket_gethostname(PyObject *self, PyObject *unused)
 {
 #ifdef MS_WINDOWS
+#  undef USE_UNCODE_gethostname
+#  if (_WIN32_WINNT >= 0x0500)
+#    define USE_UNCODE_gethostname
+#  endif
+#endif
+#ifdef USE_UNCODE_gethostname
     /* Don't use winsock's gethostname, as this returns the ANSI
        version of the hostname, whereas we need a Unicode string.
        Otherwise, gethostname apparently also returns the DNS name. */
diff -urN a-3.3.0/Modules/socketmodule.h b-3.3.0/Modules/socketmodule.h
--- a-3.3.0/Modules/socketmodule.h	Fri Nov 16 22:45:30 2012
+++ b-3.3.0/Modules/socketmodule.h	Fri Nov 16 22:45:42 2012
@@ -13,6 +13,13 @@
 # endif
 
 #else /* MS_WINDOWS */
+#ifdef socklen_t
+/* Configure script define to int on windows for GCC compiler.
+   Avoid GCC 4.4+ error (two or more data types in declaration specifiers)
+   as undef it first.
+ */
+# undef socklen_t
+#endif
 # include <winsock2.h>
 # include <ws2tcpip.h>
 /* VC6 is shipped with old platform headers, and does not have MSTcpIP.h
@@ -21,7 +28,7 @@
  * I use SIO_GET_MULTICAST_FILTER to detect a decent SDK.
  */
 # ifdef SIO_GET_MULTICAST_FILTER
-#  include <MSTcpIP.h> /* for SIO_RCVALL */
+#  include <mstcpip.h> /* for SIO_RCVALL */
 #  define HAVE_ADDRINFO
 #  define HAVE_SOCKADDR_STORAGE
 #  define HAVE_GETADDRINFO
diff -urN a-3.3.0/Objects/exceptions.c b-3.3.0/Objects/exceptions.c
--- a-3.3.0/Objects/exceptions.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/Objects/exceptions.c	Fri Nov 16 22:45:43 2012
@@ -2327,7 +2327,7 @@
     }
 
 #ifdef MS_WINDOWS
-#include <Winsock2.h>
+#include <winsock2.h>
 /* The following constants were added to errno.h in VS2010 but have
    preferred WSA equivalents. */
 #undef EADDRINUSE
diff -urN a-3.3.0/PC/msvcrtmodule.c b-3.3.0/PC/msvcrtmodule.c
--- a-3.3.0/PC/msvcrtmodule.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/PC/msvcrtmodule.c	Fri Nov 16 22:45:43 2012
@@ -21,9 +21,39 @@
 #include <io.h>
 #include <conio.h>
 #include <sys/locking.h>
+#ifdef _MSC_VER
+# define HAVE_CRTDBG_H
+#endif
+#ifdef HAVE_CRTDBG_H
 #include <crtdbg.h>
+#endif
 #include <windows.h>
 
+#if defined(__MINGW32__)
+#if __MSVCRT_VERSION__ >= 0x0700
+# define _WCONIO_DEFINED
+/* NOTE: Up to version ?.?? mingw don't define functions
+ * listed below. Also this require module to be linked with
+ * ms-vcrt at least verion 7.
+ * To build with different runtimes see:
+ *  http://www.mingw.org/wiki/HOWTO_Use_the_GCC_specs_file
+ *
+ * Also note that NT5.1(XP), shiped with msvcrt version 7.0,
+ * contain all those functions, but library name is msvcrt.dll.
+ * So if you like module to run on w2k as is you must define
+ * appropriate __MSVCRT_VERSION__ .
+ * If you like those functions even on w2k you must link
+ * with appropriate runtime and to pack it in distributions.
+ * This is what MSVC build do - it is build and packed
+ * with version 9.0 of Microsoft C-runtime.
+ */
+_CRTIMP wint_t __cdecl __MINGW_NOTHROW	_getwch (void);
+_CRTIMP wint_t __cdecl __MINGW_NOTHROW	_getwche (void);
+_CRTIMP wint_t __cdecl __MINGW_NOTHROW	_putwch (wchar_t);
+_CRTIMP wint_t __cdecl __MINGW_NOTHROW	_ungetwch(wint_t);
+#endif /* __MSVCRT_VERSION__ >= 0x0700 */
+#endif
+
 #ifdef _MSC_VER
 #if _MSC_VER >= 1500 && _MSC_VER < 1600
 #include <crtassem.h>
@@ -319,6 +349,7 @@
     if (!PyArg_ParseTuple(args, "c:ungetch", &ch))
         return NULL;
 
+    /* FIXME: why _ungetch is called instead _ungetwch */
     if (_ungetch(ch) == EOF)
         return PyErr_SetFromErrno(PyExc_IOError);
     Py_INCREF(Py_None);
diff -urN a-3.3.0/PC/winreg.c b-3.3.0/PC/winreg.c
--- a-3.3.0/PC/winreg.c	Fri Nov 16 22:45:31 2012
+++ b-3.3.0/PC/winreg.c	Fri Nov 16 22:45:43 2012
@@ -16,6 +16,18 @@
 #include "structmember.h"
 #include "windows.h"
 
+#if defined(__MINGW32__)
+_CRTIMP size_t __cdecl __MINGW_NOTHROW _mbstrlen(const char *s);
+#endif
+
+#if !defined(REG_LEGAL_CHANGE_FILTER)
+#define REG_LEGAL_CHANGE_FILTER                 \
+                (REG_NOTIFY_CHANGE_NAME          |\
+                 REG_NOTIFY_CHANGE_ATTRIBUTES    |\
+                 REG_NOTIFY_CHANGE_LAST_SET      |\
+                 REG_NOTIFY_CHANGE_SECURITY)
+#endif
+
 static BOOL PyHKEY_AsHKEY(PyObject *ob, HKEY *pRes, BOOL bNoneOK);
 static PyObject *PyHKEY_FromHKEY(HKEY h);
 static BOOL PyHKEY_Close(PyObject *obHandle);
@@ -1047,6 +1059,15 @@
 static PyObject *
 PyDeleteKeyEx(PyObject *self, PyObject *args, PyObject *kwargs)
 {
+#ifndef KEY_WOW64_64KEY
+/* KEY_WOW64_64KEY is defined for _WIN32_WINNT >= 0x0502,
+  i.e. Windows Server 2003 with SP1, Windows XP with SP2
+  and not supported on w2k
+ */
+    PyErr_SetString(PyExc_NotImplementedError,
+                    "not implemented on this platform");
+    return NULL;
+#else /*def KEY_WOW64_64KEY*/
     HKEY hKey;
     PyObject *key;
     HMODULE hMod;
@@ -1083,6 +1104,7 @@
         return PyErr_SetFromWindowsErrWithFunction(rc, "RegDeleteKeyEx");
     Py_INCREF(Py_None);
     return Py_None;
+#endif
 }
 
 static PyObject *
diff -urN a-3.3.0/Python/ceval.c b-3.3.0/Python/ceval.c
--- a-3.3.0/Python/ceval.c	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/Python/ceval.c	Fri Nov 16 22:45:43 2012
@@ -11,6 +11,17 @@
 
 #include "Python.h"
 
+#ifdef __MINGW32__
+/* GCC 4.4+ (mingw) support posix threads!
+  Note: macro __MINGW_GCC is defined for GCC 4.4+ but
+  not for GCC 3.4.5 (last stable from 3.x )
+  Instead to use __MINGW_GCC we will use more common
+  __MINGW32__ to prevent case when in GCC 3.4.5 build
+  envirionment is installed posix thread package.
+ */
+# undef HAVE_PTHREAD_H
+#endif
+
 #include "code.h"
 #include "frameobject.h"
 #include "opcode.h"
diff -urN a-3.3.0/Python/dynamic_annotations.c b-3.3.0/Python/dynamic_annotations.c
--- a-3.3.0/Python/dynamic_annotations.c	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/Python/dynamic_annotations.c	Fri Nov 16 22:45:43 2012
@@ -27,7 +27,7 @@
  * Author: Kostya Serebryany
  */
 
-#ifdef _MSC_VER
+#ifdef MS_WINDOWS
 # include <windows.h>
 #endif
 
@@ -119,7 +119,7 @@
   if (RUNNING_ON_VALGRIND) return 1;
 #endif
 
-#ifndef _MSC_VER
+#ifndef MS_WINDOWS
   char *running_on_valgrind_str = getenv("RUNNING_ON_VALGRIND");
   if (running_on_valgrind_str) {
     return strcmp(running_on_valgrind_str, "0") != 0;
diff -urN a-3.3.0/Python/dynload_win.c b-3.3.0/Python/dynload_win.c
--- a-3.3.0/Python/dynload_win.c	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/Python/dynload_win.c	Fri Nov 16 22:45:43 2012
@@ -11,8 +11,8 @@
 #include "importdl.h"
 #include <windows.h>
 
-// "activation context" magic - see dl_nt.c...
-#if HAVE_SXS
+/* "activation context" magic - see dl_nt.c... */
+#if HAVE_SXS && defined(Py_ENABLE_SHARED)
 extern ULONG_PTR _Py_ActivateActCtx();
 void _Py_DeactivateActCtx(ULONG_PTR cookie);
 #endif
@@ -27,6 +27,12 @@
 };
 
 
+#if defined(__MINGW32__)
+/* NOTE strcasecmp fail to compile with GCC for windows hosts
+ * with  error: conflicting types for 'strcasecmp'
+ */
+#  define strcasecmp fake_strcasecmp
+#endif
 /* Case insensitive string compare, to avoid any dependencies on particular
    C RTL implementations */
 
@@ -193,14 +199,14 @@
     {
         HINSTANCE hDLL = NULL;
         unsigned int old_mode;
-#if HAVE_SXS
+#if HAVE_SXS && defined(Py_ENABLE_SHARED)
         ULONG_PTR cookie = 0;
 #endif
 
         /* Don't display a message box when Python can't load a DLL */
         old_mode = SetErrorMode(SEM_FAILCRITICALERRORS);
 
-#if HAVE_SXS
+#if HAVE_SXS && defined(Py_ENABLE_SHARED)
         cookie = _Py_ActivateActCtx();
 #endif
         /* We use LoadLibraryEx so Windows looks for dependent DLLs
@@ -208,7 +214,7 @@
         /* XXX This call doesn't exist in Windows CE */
         hDLL = LoadLibraryExW(wpathname, NULL,
                               LOAD_WITH_ALTERED_SEARCH_PATH);
-#if HAVE_SXS
+#if HAVE_SXS && defined(Py_ENABLE_SHARED)
         _Py_DeactivateActCtx(cookie);
 #endif
 
diff -urN a-3.3.0/Python/errors.c b-3.3.0/Python/errors.c
--- a-3.3.0/Python/errors.c	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/Python/errors.c	Fri Nov 16 22:45:43 2012
@@ -424,7 +424,7 @@
                 /* Only ever seen this in out-of-mem
                    situations */
                 s_buf = NULL;
-                message = PyUnicode_FromFormat("Windows Error 0x%X", i);
+                message = PyUnicode_FromFormat("Windows Error 0x%x", i);
             } else {
                 /* remove trailing cr/lf and dots */
                 while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))
@@ -519,7 +519,7 @@
         NULL);          /* no args */
     if (len==0) {
         /* Only seen this in out of mem situations */
-        message = PyUnicode_FromFormat("Windows Error 0x%X", err);
+        message = PyUnicode_FromFormat("Windows Error 0x%x", err);
         s_buf = NULL;
     } else {
         /* remove trailing cr/lf and dots */
diff -urN a-3.3.0/Python/fileblocks.c b-3.3.0/Python/fileblocks.c
--- a-3.3.0/Python/fileblocks.c	Thu Jan  1 00:00:00 1970
+++ b-3.3.0/Python/fileblocks.c	Fri Nov 16 22:45:43 2012
@@ -0,0 +1,17 @@
+/*
+-- Macro: AC_STRUCT_ST_BLOCKS
+    If `struct stat' contains an `st_blocks' member, define
+    `HAVE_STRUCT_STAT_ST_BLOCKS'.  Otherwise, require an `AC_LIBOBJ'
+    replacement of `fileblocks'.
+*/
+
+#if !HAVE_STRUCT_STAT_ST_BLOCKS
+/* If necessary you may see gnulib for replacement function:
+off_t st_blocks (off_t size)
+You may found code available under GPL2 or GPL3.
+*/
+#else
+/* This declaration is solely to ensure that after preprocessing
+   this file is never empty.  */
+typedef int textutils_fileblocks_unused;
+#endif
diff -urN a-3.3.0/Python/random.c b-3.3.0/Python/random.c
--- a-3.3.0/Python/random.c	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/Python/random.c	Fri Nov 16 22:45:43 2012
@@ -1,6 +1,13 @@
 #include "Python.h"
 #ifdef MS_WINDOWS
 #include <windows.h>
+#ifdef __MINGW32__
+/* NOTE: All sample MSDN wincrypt programs include this header.
+ * It is required if we use mingw w32api.
+ * Why MSVC builds don't include it ?
+ */
+#  include <wincrypt.h>
+#endif
 #else
 #include <fcntl.h>
 #endif
diff -urN a-3.3.0/Python/thread.c b-3.3.0/Python/thread.c
--- a-3.3.0/Python/thread.c	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/Python/thread.c	Fri Nov 16 22:45:43 2012
@@ -7,6 +7,17 @@
 
 #include "Python.h"
 
+#ifdef __MINGW32__
+/* GCC 4.4+ (mingw) support posix threads!
+  Note: macro __MINGW_GCC is defined for GCC 4.4+ but
+  not for GCC 3.4.5 (last stable from 3.x )
+  Instead to use __MINGW_GCC we will use more common
+  __MINGW32__ to prevent case when in GCC 3.4.5 build
+  envirionment is installed posix thread package.
+ */
+# undef HAVE_PTHREAD_H
+#endif
+
 #ifndef _POSIX_THREADS
 /* This means pthreads are not implemented in libc headers, hence the macro
    not present in unistd.h. But they still can be implemented as an external
diff -urN a-3.3.0/configure.ac b-3.3.0/configure.ac
--- a-3.3.0/configure.ac	Fri Nov 16 22:45:28 2012
+++ b-3.3.0/configure.ac	Fri Nov 16 22:45:40 2012
@@ -87,7 +87,15 @@
 mv confdefs.h.new confdefs.h
 
 AC_SUBST(VERSION)
+case $host in
+  *-*-mingw*)
+  dnl To be compatible with MSVC build.
+VERSION=`echo PYTHON_VERSION | sed -e 's|\.||g'`
+  ;;
+  *)
 VERSION=PYTHON_VERSION
+  ;;
+esac
 
 # Version number of Python's own shared library file.
 AC_SUBST(SOVERSION)
@@ -330,6 +338,26 @@
 # Set name for machine-dependent library files
 AC_SUBST(MACHDEP)
 AC_MSG_CHECKING(MACHDEP)
+dnl In addition $host_os may contain specific settings for some host systems
+dnl as example mingwNN{YYYY} but the host is winNN. So we may set MACHDEP
+dnl to winNN in this case, i.e. different host systems from gnu autotools
+dnl point of view but same for python.
+if test -z "$MACHDEP"
+then
+	dnl set MACHDEP only on certain host systems
+	case $host in
+	*-*-mingw*)
+	dnl we use only case based on "host triplet"
+	ac_sys_system=ignore
+	dnl FIXME: what is correct:
+	dnl - PLATFORM is always "win32" (see define in PC/pyconfig.h )
+	dnl - getplatform.o is build with -DPLATFORM='"$(MACHDEP)"'
+	dnl - the platform specific files go in plat-$(MACHDEP)
+	dnl - but an item in PYTHONPATH is "plat-win" !!! oops
+	MACHDEP=win
+	;;
+	esac
+fi
 if test -z "$MACHDEP"
 then
     # avoid using uname for cross builds
@@ -413,12 +441,22 @@
 	*-*-darwin*)
 		_host_cpu=
 		;;
+	*-*-mingw*)
+		_host_cpu=
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
 		AC_MSG_ERROR([cross build not supported for $host])
 	esac
 	_PYTHON_HOST_PLATFORM="$MACHDEP${_host_cpu:+-$_host_cpu}"
+	case "$host" in
+	*-*-mingw*)
+		# On this host MACHDEP is 'win' but runtime platform is 'win32'
+		# For build prefered is 'mingw' (see setup.py)
+		_PYTHON_HOST_PLATFORM=mingw
+		;;
+	esac
 fi
 	
 # Some systems cannot stand _XOPEN_SOURCE being defined at all; they
@@ -538,6 +576,16 @@
 fi
 AC_MSG_RESULT($MACHDEP)
 
+AC_MSG_CHECKING([for init system calls])
+AC_SUBST(INITSYS)
+case $host in
+  # FIXME: May configure lack detection for os2 host system ?
+  #?#*-*-os2*)	INITSYS=os2;;
+  *-*-mingw*)	INITSYS=nt;;
+  *)		INITSYS=posix;;
+esac
+AC_MSG_RESULT([$INITSYS])
+
 # Record the configure-time value of MACOSX_DEPLOYMENT_TARGET,
 # it may influence the way we can build extensions, so distutils
 # needs to check it
@@ -876,6 +924,10 @@
   *)
     enable_shared="no";;
   esac
+  case $host in
+  *-*-mingw*)
+    enable_shared="yes";;
+  esac
 fi
 AC_MSG_RESULT($enable_shared)
 
@@ -973,6 +1025,15 @@
 	;;
 
   esac
+  case $host in
+    *-*-mingw*)
+          # windows builds don't support so-ABI version
+          LDLIBRARY='libpython$(VERSION).dll.a'
+          DLLLIBRARY='libpython$(VERSION).dll'
+          dnl setup.py add it for mingw host
+          dnl BLDLIBRARY='-L. -lpython$(VERSION)'
+          ;;
+  esac
 else # shared is disabled
   PY_ENABLE_SHARED=0
   case $ac_sys_system in
@@ -981,6 +1042,10 @@
           LDLIBRARY='libpython$(LDVERSION).dll.a'
           ;;
   esac
+  case $host in
+    *-*-mingw*)
+          LDLIBRARY='libpython$(VERSION).a';;
+  esac
 fi
 AC_SUBST(PY_ENABLE_SHARED)
 
@@ -1044,6 +1109,8 @@
 AC_SUBST(ABIFLAGS)
 ABIFLAGS=""
 
+dnl TODO: to move --with-pydebug earlier in script and to group
+dnl debug related statements togeder (if posible)
 # Check for --with-pydebug
 AC_MSG_CHECKING(for --with-pydebug)
 AC_ARG_WITH(pydebug, 
@@ -1059,6 +1126,25 @@
 else AC_MSG_RESULT(no); Py_DEBUG='false'
 fi],
 [AC_MSG_RESULT(no)])
+# FIXME: We define BUILDEXEEXT and LDLIBRARY above but:
+#  For debug versions MSVC build prepend suffix by '_d'.
+#  If we support this convention we may modify distutils(TODO).
+#  To support different build directories is good "--with-pydebug"
+#  to be earlier in the script(why i wrote this?).
+if test "x$Py_DEBUG" = xtrue; then
+  case $host in
+    dnl TODO: This is good to be where we define LDLIBRARY
+    dnl but --with-pydebug is defined too late in the script.
+    # Since Makefile.pre.in may isn't suitable yet we will not
+    # change LDLIBRARY.
+    *-*-mingw*)
+      BUILDEXEEXT=_d$BUILDEXEEXT
+      if test yes = $enable_shared; then
+        DLLLIBRARY='libpython$(VERSION)_d.dll'
+      fi
+      ;;
+  esac
+fi
 
 # XXX Shouldn't the code above that fiddles with BASECFLAGS and OPT be
 # merged with this chunk of code?
@@ -1075,6 +1161,8 @@
 
 # tweak OPT based on compiler and platform, only if the user didn't set
 # it on the command line
+# NOTE: If user set OPT at this point script ignore all previously set
+# options (not important - BeOS is depricated for python 2.6+).
 AC_SUBST(OPT)
 if test "${OPT-unset}" = "unset"
 then
@@ -1213,6 +1301,11 @@
          alpha*)
                 BASECFLAGS="$BASECFLAGS -mieee"
                 ;;
+         *-*-mingw*)
+                #MSVC compatable storage layout for bitfields in structures
+                #Force it for gcc < 4.7
+                BASECFLAGS="$BASECFLAGS -mms-bitfields"
+                ;;
     esac
 
     case $ac_sys_system in
@@ -1339,8 +1432,15 @@
     ;;
 esac
 
+dnl NOTE: although Py_DEBUG is set earlier in the script we can't move
+dnl before "# tweak OPT based on compiler" - if user specify environment
+dnl variable OPT we will lost our settings!!!
+dnl FIXME: why script add debug definition to OPT instead to BASECFLAGS?
 if test "$Py_DEBUG" = 'true'; then
-  :
+  case $host in
+    dnl Same as in PC/pyconfig.h but order in opposite(Py_DEBUG=>-D_DEBUG).
+    *-*-mingw*) OPT="-D_DEBUG $OPT";;
+  esac
 else
   OPT="-DNDEBUG $OPT"
 fi
@@ -1482,6 +1582,19 @@
 AC_MSG_RESULT($ac_cv_pthread)
 fi
 
+if test "x$ac_cv_kpthread" = xno && \
+   test "x$ac_cv_kthread" = xno && \
+   test "x$ac_cv_pthread" = xno && \
+   test "x$ac_cv_pthread_is_default" = xno
+then
+	AC_MSG_CHECKING(for NT threads)
+	AC_CACHE_VAL(ac_cv_ntthread,
+	[AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[_beginthread(0, 0, 0);]])],
+	ac_cv_ntthread=yes,
+	ac_cv_ntthread=no)])
+	AC_MSG_RESULT([$ac_cv_ntthread])
+fi
+
 # If we have set a CC compiler flag for thread support then
 # check if it works for CXX, too.
 ac_cv_cxx_thread=no
@@ -1502,6 +1615,9 @@
 then 
   CXX="$CXX -pthread"
   ac_cv_cxx_thread=yes
+elif test "x$ac_cv_ntthread" = xyes
+then
+  ac_cv_cxx_thread=always
 fi
 
 if test $ac_cv_cxx_thread = yes
@@ -1532,6 +1648,13 @@
 
 # checks for header files
 AC_HEADER_STDC
+case $host in
+  *-*-mingw*)
+    # TODO: not yet
+    # NOTE: header is defined in Pthreads-w32
+    ac_cv_header_sched_h=ignore
+    ;;
+esac
 ac_save_cppflags="$CPPFLAGS"
 CPPFLAGS="$CPPFLAGS -I/usr/include/ncursesw"
 AC_CHECK_HEADERS(asm/types.h conio.h curses.h direct.h dlfcn.h errno.h \
@@ -1546,7 +1669,7 @@
 sys/stat.h sys/syscall.h sys/sys_domain.h sys/termio.h sys/time.h \
 sys/times.h sys/types.h sys/uio.h sys/un.h sys/utsname.h sys/wait.h pty.h \
 libutil.h sys/resource.h netpacket/packet.h sysexits.h bluetooth.h \
-bluetooth/bluetooth.h linux/tipc.h spawn.h util.h)
+bluetooth/bluetooth.h linux/tipc.h spawn.h util.h winsock2.h crtdbg.h)
 CPPFLAGS=$ac_save_cppflags
 AC_HEADER_DIRENT
 AC_HEADER_MAJOR
@@ -2037,6 +2160,12 @@
 		LDCXXSHARED="g++ -shared -Wl,--enable-auto-image-base";;
 	*)	LDSHARED="ld";;
 	esac
+	case $host in
+	*-*-mingw*)
+		LDSHARED='$(CC) -shared -Wl,--enable-auto-image-base'
+		LDCXXSHARED='$(CXX) -shared -Wl,--enable-auto-image-base'
+		;;
+	esac
 fi
 AC_MSG_RESULT($LDSHARED)
 LDCXXSHARED=${LDCXXSHARED-$LDSHARED}
@@ -2125,6 +2254,12 @@
 		# when running test_compile.py.
 		LINKFORSHARED='-Wl,-E -N 2048K';;
 	esac
+	case $host in
+	*-*-mingw*)
+		if test yes = $enable_shared; then
+			LINKFORSHARED='-Wl,--out-implib=$(LDLIBRARY)'
+		fi;;
+	esac
 fi
 AC_MSG_RESULT($LINKFORSHARED)
 
@@ -2141,6 +2276,12 @@
 	*)
 		CFLAGSFORSHARED='$(CCSHARED)'
 	esac
+	case $host in
+	*-*-mingw*)
+		# TODO mingw may needs CCSHARED when building extension DLLs
+		# but not when building the interpreter DLL.
+		CFLAGSFORSHARED='';;
+	esac
 fi
 AC_MSG_RESULT($CFLAGSFORSHARED)
 
@@ -2167,17 +2308,35 @@
 AC_CHECK_LIB(dld, shl_load)	# Dynamic linking for HP-UX
 
 # only check for sem_init if thread support is requested
+case $host in
+  *-*-mingw*)
+  dnl windows build don't use pthread and we don't like configure
+  dnl to add pthread library if found
+  :
+  ;;
+  *)
 if test "$with_threads" = "yes" -o -z "$with_threads"; then
     AC_SEARCH_LIBS(sem_init, pthread rt posix4) # 'Real Time' functions on Solaris
 						# posix4 on Solaris 2.6
 						# pthread (first!) on Linux
 fi
+  ;;
+esac
 
 # check if we need libintl for locale functions
+case $host in
+  *-*-mingw*)
+  dnl Native windows build don't use libintl (see _localemodule.c).
+  dnl Also we don't like setup.py to add "intl" library to the list
+  dnl when build _locale module.
+  ;;
+  *)
 AC_CHECK_LIB(intl, textdomain,
 	[AC_DEFINE(WITH_LIBINTL, 1,
 	[Define to 1 if libintl is needed for locale functions.])
         LIBS="-lintl $LIBS"])
+  ;;
+esac
 
 # checks for system dependent C++ extensions support
 case "$ac_sys_system" in
@@ -2359,6 +2518,13 @@
     AC_DEFINE(WITH_THREAD)
     posix_threads=yes
     THREADOBJ="Python/thread.o"
+elif test "x$ac_cv_ntthread" = xyes
+then
+    AC_DEFINE(WITH_THREAD)
+    posix_threads=no
+    THREADOBJ="Python/thread.o"
+    AC_DEFINE(NT_THREADS, 1,
+	[Define to 1 if you want to use native NT threads])
 else
     if test ! -z "$with_threads" -a -d "$with_threads"
     then LDFLAGS="$LDFLAGS -L$with_threads"
@@ -2483,6 +2649,19 @@
 fi
 
 
+AC_SUBST(BUILDIN_WIN32_MODULE)
+BUILDIN_WIN32_MODULE='#'
+case $host in
+  *-*-mingw*)
+    # On win32 host(mingw build MSYS environment) site.py fail to load
+    # - if _functools is not build-in by reason of dependency (python < 3.x):
+    #   setup->site->locale->functools&operator
+    # - winreg
+    BUILDIN_WIN32_MODULE=
+  ;;
+esac
+
+
 # Check for enable-ipv6
 AH_TEMPLATE(ENABLE_IPV6, [Define if --enable-ipv6 is specified])
 AC_MSG_CHECKING([if --enable-ipv6 is specified])
@@ -2758,6 +2937,14 @@
 	fi
 	;;
 	esac
+	case $host in
+	*-*-mingw*)
+	# FIXME: it is good to use portable "$OBJEXT" instead "o" but
+	# python build isn't yet ready to use it (see Makefile.pre.in)
+	#DYNLOADFILE="dynload_win.$OBJEXT"
+	DYNLOADFILE="dynload_win.o"
+	;;
+	esac
 fi
 AC_MSG_RESULT($DYNLOADFILE)
 if test "$DYNLOADFILE" != "dynload_stub.o"
@@ -2770,6 +2957,11 @@
 
 AC_SUBST(MACHDEP_OBJS)
 AC_MSG_CHECKING(MACHDEP_OBJS)
+case $host in
+  *-*-mingw*)
+    extra_machdep_objs="PC/dl_nt.o"
+    ;;
+esac
 if test -z "$MACHDEP_OBJS"
 then
 	MACHDEP_OBJS=$extra_machdep_objs
@@ -2783,6 +2975,13 @@
 fi
 
 # checks for library functions
+case $host in
+  *-*-mingw*)
+    # TODO: not yet
+    # NOTE: function is defined in Pthreads-w32
+    ac_cv_func_sched_setscheduler=ignore
+    ;;
+esac
 AC_CHECK_FUNCS(alarm accept4 setitimer getitimer bind_textdomain_codeset chown \
  clock confstr ctermid execv faccessat fchmod fchmodat fchown fchownat \
  fexecve fdopendir fork fpathconf fstatat ftime ftruncate futimesat \
@@ -2806,6 +3005,17 @@
  truncate uname unlinkat unsetenv utimensat utimes waitid waitpid wait3 wait4 \
  wcscoll wcsftime wcsxfrm writev _getpty)
 
+dnl NOTE: On windows platform some functions are not C functions and require
+dnl additional non-standard decoration and may be libraries.
+dnl As example winsock2 functions, although are based on berkeley sockets
+dnl use stdcall convention. Also they require an additional library ws2_32.
+dnl One of those functions is "getpeername" (see list above)
+dnl and can not be detected by script. Now this impact mingw host platforms.
+dnl Since this function is used only by socketmodule, module include
+dnl necessary headers and is linked with requred libs (see setup.py)
+dnl windows exception will be handled in module code.
+dnl FIXME: If you do not like this, write appropriate check here.
+
 AC_CHECK_DECL(dirfd,
     AC_DEFINE(HAVE_DIRFD, 1,
               Define if you have the 'dirfd' function or macro.), ,
@@ -3237,6 +3447,15 @@
   ac_cv_buggy_getaddrinfo=yes
 fi]))
 fi
+case $host in
+  *-*-mingw*)
+  #FIXME: mingw "w32api" define getaddinfo if WINVER >= 0x501, i.e. XP or greater.
+  #TODO: mingw require additional check.
+  #NOTE: above check is not correct for windows platforms.
+  #  ac_cv_buggy_getaddrinfo=no
+    :
+    ;;
+esac
 
 AC_MSG_RESULT($ac_cv_buggy_getaddrinfo)
 
@@ -3292,19 +3511,33 @@
 
 AC_MSG_CHECKING(for addrinfo)
 AC_CACHE_VAL(ac_cv_struct_addrinfo,
-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netdb.h>]], [[struct addrinfo a]])],
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+#ifdef HAVE_WINSOCK2_H
+#  include <ws2tcpip.h>
+#else
+#  include <netdb.h>
+#endif]],
+    [[struct addrinfo a]])],
   [ac_cv_struct_addrinfo=yes],
   [ac_cv_struct_addrinfo=no]))
 AC_MSG_RESULT($ac_cv_struct_addrinfo)
 if test $ac_cv_struct_addrinfo = yes; then
-	AC_DEFINE(HAVE_ADDRINFO, 1, [struct addrinfo (netdb.h)])
+	AC_DEFINE(HAVE_ADDRINFO, 1, [struct addrinfo])
 fi
 
 AC_MSG_CHECKING(for sockaddr_storage)
 AC_CACHE_VAL(ac_cv_struct_sockaddr_storage,
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-#		include <sys/types.h>
-#		include <sys/socket.h>]], [[struct sockaddr_storage s]])],
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_SOCKET_H
+#include <sys/socket.h>
+#endif
+#ifdef HAVE_WINSOCK2_H
+#include <winsock2.h>
+#endif]],
+    [[struct sockaddr_storage s]])],
   [ac_cv_struct_sockaddr_storage=yes],
   [ac_cv_struct_sockaddr_storage=no]))
 AC_MSG_RESULT($ac_cv_struct_sockaddr_storage)
@@ -3312,6 +3545,27 @@
 	AC_DEFINE(HAVE_SOCKADDR_STORAGE, 1, [struct sockaddr_storage (sys/socket.h)])
 fi
 
+case $host in
+  *-*-mingw*)
+    dnl See Modules/posixmodule.c for details.
+    dnl Also check below distinguish wingw and mingw-w64
+    AC_MSG_CHECKING([for REPARSE_DATA_BUFFER])
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
+#include <windows.h>
+#include <winnt.h>
+], [
+  REPARSE_DATA_BUFFER rdb
+])],
+      [py_reparse_data_buffer=yes],
+      [py_reparse_data_buffer=no]
+    )
+    AC_MSG_RESULT([$py_reparse_data_buffer])
+    if test yes = $py_reparse_data_buffer; then
+      AC_DEFINE([HAVE_REPARSE_DATA_BUFFER],[1],[Define to 1 if you have the 'REPARSE_DATA_BUFFER' structure.])
+    fi
+  ;;
+esac
+
 # checks for compiler characteristics
 
 AC_C_CHAR_UNSIGNED
@@ -3497,11 +3751,16 @@
 [AC_MSG_RESULT(no)])
 
 # check for --with-libm=...
+dnl obsolete style to set libraries for a system
 AC_SUBST(LIBM)
 case $ac_sys_system in
 Darwin) ;;
 *) LIBM=-lm
 esac
+dnl new style to set libraries for host system
+case $host in
+  *-*-mingw*) LIBM=;;
+esac
 AC_MSG_CHECKING(for --with-libm=STRING)
 AC_ARG_WITH(libm,
             AS_HELP_STRING([--with-libm=STRING], [math library]),
@@ -3550,6 +3809,13 @@
 # **************************************************
 # * Check for various properties of floating point *
 # **************************************************
+case $host in
+  *-*-mingw*)
+    ac_cv_little_endian_double=yes
+    ac_cv_big_endian_double=no
+    ac_cv_mixed_endian_double=no
+  ;;
+esac
 
 AC_MSG_CHECKING(whether C doubles are little-endian IEEE 754 binary64)
 AC_CACHE_VAL(ac_cv_little_endian_double, [
@@ -3633,6 +3899,8 @@
 
 # This inline assembler syntax may also work for suncc and icc,
 # so we try it on all platforms.
+# Note MSVC build use Python/dtoa.c, but I could not find any reason
+# to use this file for GCC(mingw*) builds, so mingw* will use gcc asm :)
 
 AC_MSG_CHECKING(whether we can use gcc inline assembler to get and set x87 control word)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
@@ -3696,11 +3964,30 @@
 
 AC_CHECK_FUNCS([acosh asinh atanh copysign erf erfc expm1 finite gamma])
 AC_CHECK_FUNCS([hypot lgamma log1p log2 round tgamma])
+dnl NOTE:
+dnl MSVC build PC/pyconfig.h define HAVE_DECL_ISINF but it is useless
+dnl since header define Py_IS_INFINITY as (!_finite(X) && !_isnan(X)).
+dnl Also in pymath.h is commented too how PC/pyconfig.h define isinf.
+dnl For mingw to keep compatibility with MSVC build we will define
+dnl Py_IS_INFINITY in pyport.h.
 AC_CHECK_DECLS([isinf, isnan, isfinite], [], [], [[#include <math.h>]])
 
 # On FreeBSD 6.2, it appears that tanh(-0.) returns 0. instead of
 # -0. on some architectures.
 AC_MSG_CHECKING(whether tanh preserves the sign of zero)
+case $host in
+  *-*-mingw*)
+    # Some MSVC runtimes don't preserve zero sign.
+    # On mingw host we will use always replacement function.
+    #NOTE after 86299: Issue #10337: skip tests of tanh() sign in test_math and test_cmath if tanh()
+    # doesn't preserve the zero sign (if TANH_PRESERVES_ZERO_SIGN define is 0).
+    # the *match tests are skiped by "sysconfig.get_config_var('TANH_PRESERVES_ZERO_SIGN')"
+    # As result of above skip in the test introdused by change 86299 at
+    # this point configure will set flag to yes for mingw hosts.
+    # The correct is flag to set to no. Also as for mingw host replacement function
+    # is used then it is save to set to yes.
+    ac_cv_tanh_preserves_zero_sign=yes;;
+esac
 AC_CACHE_VAL(ac_cv_tanh_preserves_zero_sign, [
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <math.h>
@@ -3726,6 +4013,12 @@
 
 if test "$ac_cv_func_log1p" = yes
 then
+    case $host in
+      *-*-mingw*)
+        #FIXME need more test for windows platforms
+        ac_cv_log1p_drops_zero_sign=no
+      ;;
+    esac
     # On some versions of AIX, log1p(-0.) returns 0. instead of
     # -0.  See issue #9920.
     AC_MSG_CHECKING(whether log1p drops the sign of negative zero)
@@ -3760,6 +4053,13 @@
 # the kernel module that provides POSIX semaphores
 # isn't loaded by default, so an attempt to call
 # sem_open results in a 'Signal 12' error.
+if test $ac_cv_func_sem_open = yes; then
+case $host in
+  *-*-mingw*)
+    # GCC 4.4+ (mingw) support posix threads(!)
+    # bug we won't use them on windows platform.
+    ac_cv_posix_semaphores_enabled=no;;
+esac
 AC_MSG_CHECKING(whether POSIX semaphores are enabled)
 AC_CACHE_VAL(ac_cv_posix_semaphores_enabled,
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
@@ -3785,6 +4085,9 @@
 [ac_cv_posix_semaphores_enabled=yes])
 )
 AC_MSG_RESULT($ac_cv_posix_semaphores_enabled)
+else
+   ac_cv_posix_semaphores_enabled=no
+fi
 if test $ac_cv_posix_semaphores_enabled = no
 then
   AC_DEFINE(POSIX_SEMAPHORES_NOT_ENABLED, 1,
@@ -3793,6 +4096,16 @@
 
 # Multiprocessing check for broken sem_getvalue
 AC_MSG_CHECKING(for broken sem_getvalue)
+case $host in
+  *-*-mingw*)
+    # GCC(mingw) 4.4+ require and use posix threads(pthreads-w32)
+    # Also system may contain installed pthreads-w32.
+    # NOTE the test case below don't work for pthreads-w32:
+    # - SEM_FAILED is not defined;
+    # - sem_open is stub;
+    # - sem_getvalue work(!).
+    ac_cv_broken_sem_getvalue=no;;
+esac
 AC_CACHE_VAL(ac_cv_broken_sem_getvalue,
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <unistd.h>
@@ -3878,6 +4191,9 @@
 then
   # check whether wchar_t is signed or not
   AC_MSG_CHECKING(whether wchar_t is signed)
+  case $host in
+    *-*-mingw*) ac_cv_wchar_t_signed=no;;
+  esac
   AC_CACHE_VAL(ac_cv_wchar_t_signed, [
   AC_RUN_IFELSE([AC_LANG_SOURCE([[
   #include <wchar.h>
@@ -3924,6 +4240,12 @@
 # Thus for example, Python 3.2 built with wide unicode, pydebug, and pymalloc,
 # would get a shared library ABI version tag of 'cpython-32dmu' and shared
 # libraries would be named 'foo.cpython-32dmu.so'.
+case $host in
+  *-*-mingw*)
+  # windows builds don't support so-ABI version
+  ABIFLAGS=
+  ;;
+esac
 AC_SUBST(SOABI)
 AC_MSG_CHECKING(ABIFLAGS)
 AC_MSG_RESULT($ABIFLAGS)
@@ -3952,6 +4274,16 @@
 		   SO=.${SOABI}.so;;
 	*)	   SO=.so;;
 	esac
+	case $host in
+	*-*-mingw*)
+	#NOTE: see _PyImport_DynLoadFiletab in dynload_win.c
+	if test "x$Py_DEBUG" = xtrue; then
+		SO=_d.pyd
+	else
+		SO=.pyd
+	fi
+	;;
+	esac
 else
 	# this might also be a termcap variable, see #610332
 	echo
@@ -4025,9 +4357,9 @@
   if test $py_cv_lib_readline = yes; then
     break
   fi
+  READLINE_LIBS=
 done
-# Uncomment this line if you want to use READINE_LIBS in Makefile or scripts
-#AC_SUBST([READLINE_LIBS])
+AC_SUBST([READLINE_LIBS])
 if test $py_cv_lib_readline = no; then
   AC_MSG_RESULT([none])
 else
@@ -4315,6 +4647,12 @@
 CPPFLAGS=$ac_save_cppflags
 
 AC_MSG_NOTICE([checking for device files])
+case $host in
+  *-*-mingw*)
+    ac_cv_file__dev_ptmx=ignore #NOTE: under MSYS environment device exist
+    ac_cv_file__dev_ptc=no
+    ;;
+esac
 
 dnl NOTE: Inform user how to proceed with files when cross compiling.
 if test "x$cross_compiling" = xyes; then
@@ -4343,6 +4681,9 @@
 
 if test "$have_long_long" = yes
 then
+  case $host in
+    *-*-mingw*) ac_cv_have_long_long_format=yes;;
+  esac
   AC_MSG_CHECKING(for %lld and %llu printf() format support)
   AC_CACHE_VAL(ac_cv_have_long_long_format,
   AC_RUN_IFELSE([AC_LANG_SOURCE([[[
@@ -4410,6 +4751,9 @@
 	LIBS="$LIBS -framework CoreFoundation"
 fi
 
+case $host in
+  *-*-mingw*) ac_cv_have_size_t_format=no;;
+esac
 AC_CACHE_CHECK([for %zd printf() format support], ac_cv_have_size_t_format, [dnl
 AC_RUN_IFELSE([AC_LANG_SOURCE([[
 #include <stdio.h>
@@ -4456,6 +4800,8 @@
   [Define to printf format modifier for Py_ssize_t])
 fi
 
+dnl NOTE: check is incorrect for win host systems, i.e. mingw and etc.,
+dnl but on those systems socklen_t is defined in ws2tcpip.h as int ;)
 AC_CHECK_TYPE(socklen_t,,
   AC_DEFINE(socklen_t,int,
             [Define to `int' if <sys/socket.h> does not define.]),[
@@ -4550,8 +4896,40 @@
   THREADHEADERS="$THREADHEADERS \$(srcdir)/$h"
 done
 
+# FIXME: in cross-compilation env. (mingw on linux) how to select correct compiler ?
+# The current py-code will created modules with .so suffix and environment
+# variable setting SO=$(SO) don't help
+# see output of: python setup.py build --help-compiler
+AC_SUBST(PYMOD_BUILDOPT)
+case $host in
+  *-*-mingw*) PYMOD_BUILDOPT="--compiler mingw32";;
+esac
+
+dnl Objects for python and modules
+# Python interpreter main program for frozen scripts
+AC_SUBST(PYTHON_OBJS_FROZENMAIN)
+PYTHON_OBJS_FROZENMAIN="Python/frozenmain.o"
+# MODULE_GETPATH - default sys.path calculations
+AC_SUBST(MODULE_GETPATH)
+MODULE_GETPATH=Modules/getpath.o
+case $host in
+  *-*-mingw*)
+    dnl "PC" is project sub-directory and we has to prepend user defined flags
+    dnl NOTE setup.py add in reverse order if build is in source tree
+    CPPFLAGS="-I\$(srcdir)/PC -I\$(srcdir)/Python $CPPFLAGS"
+
+    # FIXME: why windows builds don't use PC/frozen_dllmain.o ?
+    PYTHON_OBJS_FROZENMAIN=""
+    # default sys.path calculations for windows platforms
+    MODULE_GETPATH=PC/getpathp.o
+    ;;
+esac
+
 AC_SUBST(SRCDIRS)
 SRCDIRS="Parser Grammar Objects Python Modules Mac"
+case $host in
+  *-*-mingw*) SRCDIRS="$SRCDIRS PC";;
+esac
 AC_MSG_CHECKING(for build directories)
 for dir in $SRCDIRS; do
     if test ! -d $dir; then
@@ -4644,6 +5022,7 @@
 fi
 
 # generate output files
+AC_CONFIG_FILES([setup_info])
 AC_CONFIG_FILES(Makefile.pre Modules/Setup.config Misc/python.pc Misc/python-config.sh)
 AC_CONFIG_FILES([Modules/ld_so_aix], [chmod +x Modules/ld_so_aix])
 AC_OUTPUT
diff -urN a-3.3.0/pyconfig.h.in b-3.3.0/pyconfig.h.in
--- a-3.3.0/pyconfig.h.in	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/pyconfig.h.in	Fri Nov 16 22:45:43 2012
@@ -43,7 +43,7 @@
 /* Define to 1 if you have the `acosh' function. */
 #undef HAVE_ACOSH
 
-/* struct addrinfo (netdb.h) */
+/* struct addrinfo */
 #undef HAVE_ADDRINFO
 
 /* Define to 1 if you have the `alarm' function. */
@@ -131,6 +131,9 @@
 /* Define to 1 if you have the `copysign' function. */
 #undef HAVE_COPYSIGN
 
+/* Define to 1 if you have the <crtdbg.h> header file. */
+#undef HAVE_CRTDBG_H
+
 /* Define to 1 if you have the `ctermid' function. */
 #undef HAVE_CTERMID
 
@@ -663,6 +666,9 @@
 /* Define to 1 if you have the `renameat' function. */
 #undef HAVE_RENAMEAT
 
+/* Define to 1 if you have the 'REPARSE_DATA_BUFFER' structure. */
+#undef HAVE_REPARSE_DATA_BUFFER
+
 /* Define if you have readline 2.1 */
 #undef HAVE_RL_CALLBACK
 
@@ -1103,6 +1109,9 @@
 /* Define to 1 if you have the `wcsxfrm' function. */
 #undef HAVE_WCSXFRM
 
+/* Define to 1 if you have the <winsock2.h> header file. */
+#undef HAVE_WINSOCK2_H
+
 /* Define if tzset() actually switches the local timezone in a meaningful way.
    */
 #undef HAVE_WORKING_TZSET
@@ -1129,6 +1138,9 @@
 
 /* Define if mvwdelch in curses.h is an expression. */
 #undef MVWDELCH_IS_EXPRESSION
+
+/* Define to 1 if you want to use native NT threads */
+#undef NT_THREADS
 
 /* Define to the address where bug reports for this package should be sent. */
 #undef PACKAGE_BUGREPORT
diff -urN a-3.3.0/setup.py b-3.3.0/setup.py
--- a-3.3.0/setup.py	Fri Nov 16 22:45:32 2012
+++ b-3.3.0/setup.py	Fri Nov 16 22:45:43 2012
@@ -195,7 +195,7 @@
         # with Modules/.
         srcdir = sysconfig.get_config_var('srcdir')
         if not srcdir:
-            # Maybe running on Windows but not using CYGWIN?
+            # Maybe running on Windows but not using posix build?
             raise ValueError("No source directory; cannot proceed.")
         srcdir = os.path.abspath(srcdir)
         moddirlist = [os.path.join(srcdir, 'Modules')]
@@ -249,8 +249,38 @@
         # compilers
         if compiler is not None:
             (ccshared,cflags) = sysconfig.get_config_vars('CCSHARED','CFLAGS')
-            args['compiler_so'] = compiler + ' ' + ccshared + ' ' + cflags
-        self.compiler.set_executables(**args)
+            # distutils set first cflags then ccshared
+            args['compiler_so'] = compiler + ' ' + cflags + ' ' + ccshared
+
+        # FIXME: Is next correct ?
+        # To link modules we need LDSHARED passed to setup.py otherwise
+        # distutils will use linker from build system if cross-compiling.
+        linker_so = os.environ.get('LDSHARED')
+        if linker_so is not None:
+            args['linker_so'] = linker_so
+
+        #NO. lines above just override already customised compiler values
+        #self.compiler.set_executables(**args)
+
+        if host_platform in ['mingw', 'win32']:
+            data = open('pyconfig.h').read()
+            m = re.search(r"#s*define\s+Py_DEBUG\s+1\s*", data)
+            if m is not None:
+                self.compiler.libraries.append("python" + str(sysconfig.get_config_var('VERSION')) + "_d")
+            else:
+                self.compiler.libraries.append("python" + str(sysconfig.get_config_var('VERSION')))
+
+        if host_platform in ['mingw', 'win32']:
+            # NOTE: See comment for SHLIBS in configure.in .
+            # Although it look obsolete since setup.py add module
+            # required libraries we will pass list too.
+            # As example this will allow us to propage static
+            # libraries like mingwex to modules.
+            for lib in sysconfig.get_config_var('SHLIBS').split():
+                if lib.startswith('-l'):
+                    self.compiler.libraries.append(lib[2:])
+                else:
+                    self.compiler.libraries.append(lib)
 
         # Not only do we write the builddir cookie, but we manually install
         # the shared modules directory if it isn't already in sys.path.
@@ -332,6 +362,10 @@
             self.announce('WARNING: skipping import check for Cygwin-based "%s"'
                 % ext.name)
             return
+        if cross_compiling:
+            self.announce('WARNING: skipping import check for cross-compiled "%s"'
+                % ext.name)
+            return
         ext_filename = os.path.join(
             self.build_lib,
             self.get_ext_filename(self.get_ext_fullname(ext.name)))
@@ -455,6 +489,9 @@
             os.unlink(tmpfile)
 
     def detect_modules(self):
+        pyconfig_h_data = open('pyconfig.h').read()
+        setup_info_data = open('setup_info').read()
+
         # Ensure that /usr/local is always used, but the local build
         # directories (i.e. '.' and 'Include') must be first.  See issue
         # 10520.
@@ -506,6 +543,11 @@
             # (PYTHONFRAMEWORK is set) to avoid # linking problems when
             # building a framework with different architectures than
             # the one that is currently installed (issue #7473)
+            # NOTE: revision 25103:[ #420565 ] add search in sys.prefix
+            # before current source tree !?!?!?! No comment!
+            # Since add_dir_to_list prepend path issue with library paths
+            # is silently fixed ;) but introduce new one for header paths
+            # as path must be appended !
             add_dir_to_list(self.compiler.library_dirs,
                             sysconfig.get_config_var("LIBDIR"))
             add_dir_to_list(self.compiler.include_dirs,
@@ -548,6 +590,7 @@
             # NOTE: using shlex.split would technically be more correct, but
             # also gives a bootstrap problem. Let's hope nobody uses
             # directories with whitespace in the name to store libraries.
+            # FIXME: Why LDFLAGS again ?
             cflags, ldflags = sysconfig.get_config_vars(
                     'CFLAGS', 'LDFLAGS')
             for item in cflags.split():
@@ -560,7 +603,7 @@
 
         # Check for MacOS X, which doesn't need libm.a at all
         math_libs = ['m']
-        if host_platform == 'darwin':
+        if host_platform in ['darwin', 'mingw', 'win32']:
             math_libs = []
 
         # XXX Omitted modules: gl, pure, dl, SGI-specific modules
@@ -618,24 +661,35 @@
         # supported...)
 
         # fcntl(2) and ioctl(2)
-        libs = []
-        if (config_h_vars.get('FLOCK_NEEDS_LIBBSD', False)):
-            # May be necessary on AIX for flock function
-            libs = ['bsd']
-        exts.append( Extension('fcntl', ['fcntlmodule.c'], libraries=libs) )
-        # pwd(3)
-        exts.append( Extension('pwd', ['pwdmodule.c']) )
-        # grp(3)
-        exts.append( Extension('grp', ['grpmodule.c']) )
-        # spwd, shadow passwords
-        if (config_h_vars.get('HAVE_GETSPNAM', False) or
-                config_h_vars.get('HAVE_GETSPENT', False)):
-            exts.append( Extension('spwd', ['spwdmodule.c']) )
+        if host_platform not in ['mingw', 'win32']:
+            libs = []
+            if (config_h_vars.get('FLOCK_NEEDS_LIBBSD', False)):
+                # May be necessary on AIX for flock function
+                libs = ['bsd']
+            exts.append( Extension('fcntl', ['fcntlmodule.c'], libraries=libs) )
+        else:
+            missing.append('fcntl')
+        if host_platform not in ['mingw', 'win32']:
+            # pwd(3)
+            exts.append( Extension('pwd', ['pwdmodule.c']) )
+            # grp(3)
+            exts.append( Extension('grp', ['grpmodule.c']) )
+            # spwd, shadow passwords
+            if (config_h_vars.get('HAVE_GETSPNAM', False) or
+                    config_h_vars.get('HAVE_GETSPENT', False)):
+                exts.append( Extension('spwd', ['spwdmodule.c']) )
+            else:
+                missing.append('spwd')
         else:
-            missing.append('spwd')
+            missing.extend(['pwd', 'grp', 'spwd'])
 
         # select(2); not on ancient System V
-        exts.append( Extension('select', ['selectmodule.c']) )
+        if host_platform in ['mingw', 'win32']:
+            select_libs = ['ws2_32']
+        else:
+            select_libs = []
+        exts.append( Extension('select', ['selectmodule.c'],
+                               libraries=select_libs) )
 
         # Fred Drake's interface to the Python parser
         exts.append( Extension('parser', ['parsermodule.c']) )
@@ -644,8 +698,11 @@
         exts.append( Extension('mmap', ['mmapmodule.c']) )
 
         # Lance Ellinghaus's syslog module
-        # syslog daemon interface
-        exts.append( Extension('syslog', ['syslogmodule.c']) )
+        if host_platform not in ['mingw', 'win32']:
+            # syslog daemon interface
+            exts.append( Extension('syslog', ['syslogmodule.c']) )
+        else:
+            missing.append('syslog')
 
         #
         # Here ends the simple stuff.  From here on, modules need certain
@@ -662,7 +719,8 @@
         exts.append( Extension('audioop', ['audioop.c']) )
 
         # readline
-        do_readline = self.compiler.find_library_file(lib_dirs, 'readline')
+        do_readline = re.search(r"#s*define\s+HAVE_LIBREADLINE\s+1\s*", pyconfig_h_data)
+
         readline_termcap_library = ""
         curses_library = ""
         # Cannot use os.popen here in py3k.
@@ -670,9 +728,31 @@
         if not os.path.exists(self.build_temp):
             os.makedirs(self.build_temp)
         # Determine if readline is already linked against curses or tinfo.
+        # NOTE readline_termcap_library flag is used only if
+        # cannot determine readline libs (see configure.in checks)
+        readline_conf = False
+        readline_conf_termcap = ""
         if do_readline:
+            m = re.search(
+                r"\s*READLINE_LIBS\s*=\s*(?P<rl>-l.*)",
+                setup_info_data
+            )
+            if m:
+                readline_conf = True
+                ln = m.group('rl')
+                if 'curses' in ln:
+                    readline_conf_termcap = re.sub(
+                        r'.*-l(n?cursesw?).*', r'\1', ln
+                    ).rstrip()
+                elif 'tinfo' in ln: # termcap interface split out from ncurses
+                    readline_conf_termcap = 'tinfo'
+                else: # may be readline is linked with termcap interface library
+                    readline_conf = False
+
+        if do_readline and not readline_conf and find_executable('ldd'):
+            do_readline = self.compiler.find_library_file(lib_dirs, 'readline')
             if cross_compiling:
-                ret = os.system("%s -d %s | grep '(NEEDED)' > %s" \
+                ret = os.system("%s -d %s 2>/dev/null | grep '(NEEDED)' > %s" \
                                 % (sysconfig.get_config_var('READELF'),
                                    do_readline, tmpfile))
             elif find_executable('ldd'):
@@ -695,7 +775,9 @@
                 os.unlink(tmpfile)
         # Issue 7384: If readline is already linked against curses,
         # use the same library for the readline and curses modules.
-        if 'curses' in readline_termcap_library:
+        if 'curses' in readline_conf_termcap:
+            curses_library = readline_conf_termcap
+        elif 'curses' in readline_termcap_library:
             curses_library = readline_termcap_library
         elif self.compiler.find_library_file(lib_dirs, 'ncursesw'):
             curses_library = 'ncursesw'
@@ -744,20 +826,31 @@
 
         # crypt module.
 
-        if self.compiler.find_library_file(lib_dirs, 'crypt'):
-            libs = ['crypt']
+        if host_platform not in ['mingw', 'win32']:
+            if self.compiler.find_library_file(lib_dirs, 'crypt'):
+                libs = ['crypt']
+            else:
+                libs = []
+            exts.append( Extension('_crypt', ['_cryptmodule.c'], libraries=libs) )
         else:
-            libs = []
-        exts.append( Extension('_crypt', ['_cryptmodule.c'], libraries=libs) )
+            missing.append('_crypt')
 
         # CSV files
         exts.append( Extension('_csv', ['_csv.c']) )
 
         # POSIX subprocess module helper.
-        exts.append( Extension('_posixsubprocess', ['_posixsubprocess.c']) )
+        if host_platform not in ['mingw', 'win32']:
+            exts.append( Extension('_posixsubprocess', ['_posixsubprocess.c']) )
+        else:
+            missing.append('_posixsubprocess')
 
         # socket(2)
+        if host_platform in ['mingw', 'win32']:
+            socket_libs = ['ws2_32']
+        else:
+            socket_libs = []
         exts.append( Extension('_socket', ['socketmodule.c'],
+                               libraries=socket_libs,
                                depends = ['socketmodule.h']) )
         # Detect SSL support for the socket module (via _ssl)
         search_for_ssl_incs_in = [
@@ -779,10 +872,13 @@
 
         if (ssl_incs is not None and
             ssl_libs is not None):
+            _ssl_libs = ['ssl', 'crypto']
+            if host_platform in ['mingw', 'win32']:
+                _ssl_libs.append('ws2_32')
             exts.append( Extension('_ssl', ['_ssl.c'],
                                    include_dirs = ssl_incs,
                                    library_dirs = ssl_libs,
-                                   libraries = ['ssl', 'crypto'],
+                                   libraries = _ssl_libs,
                                    depends = ['socketmodule.h']), )
         else:
             missing.append('_ssl')
@@ -819,15 +915,18 @@
             if have_usable_openssl:
                 # The _hashlib module wraps optimized implementations
                 # of hash functions from the OpenSSL library.
+                # NOTE: _hashlib require only OpenSSL crypto library !
                 exts.append( Extension('_hashlib', ['_hashopenssl.c'],
                                        depends = ['hashlib.h'],
                                        include_dirs = ssl_incs,
                                        library_dirs = ssl_libs,
-                                       libraries = ['ssl', 'crypto']) )
+                                       libraries = ['crypto']) )
             else:
                 print("warning: openssl 0x%08x is too old for _hashlib" %
                       openssl_ver)
                 missing.append('_hashlib')
+        # NOTE: MSVC build alwais include _md5 and _sha modules
+        # as build-in modules
 
         # We always compile these even when OpenSSL is available (issue #14693).
         # It's harmless and the object code is tiny (40-50 KB per module,
@@ -860,6 +959,30 @@
         min_db_ver = (3, 3)
         db_setup_debug = False   # verbose debug prints from this script?
 
+        # Modules with some Windows dependencies:
+        if host_platform in ['mingw', 'win32']:
+            srcdir = sysconfig.get_config_var('srcdir')
+            pc_srcdir = os.path.abspath(os.path.join(srcdir, 'PC'))
+
+            exts.append( Extension('msvcrt', [os.path.join(pc_srcdir, p)
+                for p in ['msvcrtmodule.c']]) )
+
+            #Note that PCbuild use fci but MSDN document as cabinet
+            exts.append( Extension('_msi', [os.path.join(pc_srcdir, p)
+                for p in ['_msi.c']],
+                libraries=['msi','cabinet','rpcrt4']) )
+
+            exts.append( Extension('_winapi', ['_winapi.c']) )
+
+            # On win32 host(mingw build in MSYS environment) show that site.py
+            # fail to load if some modules are not build-in:
+            #exts.append( Extension('winreg', [os.path.join(pc_srcdir, p)
+            #    for p in ['winreg.c']]) )
+
+            exts.append( Extension('winsound', [os.path.join(pc_srcdir, p)
+                for p in ['winsound.c']],
+                libraries=['winmm']) )
+
         def allow_db_ver(db_ver):
             """Returns a boolean if the given BerkeleyDB version is acceptable.
 
@@ -1118,6 +1241,7 @@
                 '_sqlite/util.c', ]
 
             sqlite_defines = []
+            #NOTE: don't add mingw here
             if host_platform != "win32":
                 sqlite_defines.append(('MODULE_NAME', '"sqlite3"'))
             else:
@@ -1231,7 +1355,8 @@
                 missing.append('_dbm')
 
         # Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:
-        if ('gdbm' in dbm_order and
+        if (host_platform not in ['mingw', 'win32'] and
+            'gdbm' in dbm_order and
             self.compiler.find_library_file(lib_dirs, 'gdbm')):
             exts.append( Extension('_gdbm', ['_gdbmmodule.c'],
                                    libraries = ['gdbm'] ) )
@@ -1239,7 +1364,7 @@
             missing.append('_gdbm')
 
         # Unix-only modules
-        if host_platform != 'win32':
+        if host_platform not in ['mingw', 'win32']:
             # Steen Lumholt's termios module
             exts.append( Extension('termios', ['termios.c']) )
             # Jeremy Hylton's rlimit interface
@@ -1453,7 +1578,7 @@
         self.detect_ctypes(inc_dirs, lib_dirs)
 
         # Richard Oudkerk's multiprocessing module
-        if host_platform == 'win32':        # Windows
+        if host_platform in ['mingw', 'win32']:
             macros = dict()
             libraries = ['ws2_32']
 
@@ -1481,9 +1606,11 @@
 
         else:                                   # Linux and other unices
             macros = dict()
-            libraries = ['rt']
+            # NOTE: line below is never used before to add MINGW platform
+            #libraries = ['rt']
+            libraries = []
 
-        if host_platform == 'win32':
+        if host_platform in ['mingw', 'win32']:
             multiprocessing_srcs = [ '_multiprocessing/multiprocessing.c',
                                      '_multiprocessing/semaphore.c',
                                    ]
@@ -1496,7 +1623,9 @@
                 multiprocessing_srcs.append('_multiprocessing/semaphore.c')
 
         if sysconfig.get_config_var('WITH_THREAD'):
+            #FIXME: why above set libraries aren't used ?
             exts.append ( Extension('_multiprocessing', multiprocessing_srcs,
+                                    libraries=libraries,
                                     define_macros=list(macros.items()),
                                     include_dirs=["Modules/_multiprocessing"]))
         else:
@@ -1679,6 +1808,9 @@
         if host_platform == 'sunos5':
             include_dirs.append('/usr/openwin/include')
             added_lib_dirs.append('/usr/openwin/lib')
+        elif host_platform in ['mingw', 'win32']:
+            # mingw&win32 don't use X11 headers and libraries
+            pass
         elif os.path.exists('/usr/X11R6/include'):
             include_dirs.append('/usr/X11R6/include')
             added_lib_dirs.append('/usr/X11R6/lib64')
@@ -1693,6 +1825,7 @@
 
         # If Cygwin, then verify that X is installed before proceeding
         if host_platform == 'cygwin':
+            include_dirs.append('/usr/include')
             x11_inc = find_file('X11/Xlib.h', [], include_dirs)
             if x11_inc is None:
                 return
@@ -1714,8 +1847,8 @@
         if host_platform in ['aix3', 'aix4']:
             libs.append('ld')
 
-        # Finally, link with the X11 libraries (not appropriate on cygwin)
-        if host_platform != "cygwin":
+        # Finally, link with the X11 libraries (not appropriate on cygwin, mingw)
+        if not host_platform in ['cygwin', 'mingw', 'win32']:
             libs.append('X11')
 
         ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
@@ -1770,6 +1903,38 @@
         return True
 
     def configure_ctypes(self, ext):
+        if host_platform in ['mingw', 'win32']:
+            # win32 platform use own sources and includes
+            # from Modules/_ctypes/libffi_msvc/
+            srcdir = sysconfig.get_config_var('srcdir')
+
+            ffi_srcdir = os.path.abspath(os.path.join(srcdir, 'Modules',
+                                         '_ctypes'))
+            sources = [os.path.join(ffi_srcdir, p)
+                for p in ['malloc_closure.c',
+                         ]]
+            ext.sources.extend(sources)
+
+            ffi_srcdir = os.path.abspath(os.path.join(srcdir, 'Modules',
+                                         '_ctypes', 'libffi_msvc'))
+            #FIXME: _ctypes/libffi_msvc/win64.asm ?
+            sources = [os.path.join(ffi_srcdir, p)
+                for p in ['ffi.c',
+                          'prep_cif.c',
+                          'win32.S',
+                         ]]
+            # NOTE: issue2942 don't resolve problem with assembler code.
+            # It seems to me that python refuse to build an extension
+            # if exist a source with unknown suffix.
+            self.compiler.src_extensions.append('.s')
+            self.compiler.src_extensions.append('.S')
+            ext.include_dirs.append(ffi_srcdir)
+            ext.sources.extend(sources)
+            ext.libraries.extend(['ole32', 'oleaut32', 'uuid'])
+            #AdditionalOptions="/EXPORT:DllGetClassObject,PRIVATE /EXPORT:DllCanUnloadNow,PRIVATE"
+            ext.export_symbols.extend(['DllGetClassObject PRIVATE',
+                                       'DllCanUnloadNow PRIVATE'])
+            return True
         if not self.use_system_libffi:
             if host_platform == 'darwin':
                 return self.configure_ctypes_darwin(ext)
@@ -1818,6 +1983,11 @@
                                fficonfig['ffi_sources'])
             ext.include_dirs.extend(include_dirs)
             ext.extra_compile_args.extend(extra_compile_args)
+            if host_platform in ['mingw', 'win32']:
+                ext.libraries.extend(['ole32', 'oleaut32', 'uuid'])
+                #AdditionalOptions="/EXPORT:DllGetClassObject,PRIVATE /EXPORT:DllCanUnloadNow,PRIVATE"
+                ext.export_symbols.extend(['DllGetClassObject PRIVATE',
+                                           'DllCanUnloadNow PRIVATE'])
         return True
 
     def detect_ctypes(self, inc_dirs, lib_dirs):
@@ -1861,7 +2031,12 @@
                         libraries=[],
                         sources=sources,
                         depends=depends)
+        if host_platform in ['mingw', 'win32']:
+            ctypes_test_libs = ['oleaut32']
+        else:
+            ctypes_test_libs = []
         ext_test = Extension('_ctypes_test',
+                             libraries=ctypes_test_libs,
                              sources=['_ctypes/_ctypes_test.c'])
         self.extensions.extend([ext, ext_test])
 
diff -urN a-3.3.0/setup_info.in b-3.3.0/setup_info.in
--- a-3.3.0/setup_info.in	Thu Jan  1 00:00:00 1970
+++ b-3.3.0/setup_info.in	Fri Nov 16 22:45:43 2012
@@ -0,0 +1,3 @@
+# file with data from configure file
+
+READLINE_LIBS=@READLINE_LIBS@
