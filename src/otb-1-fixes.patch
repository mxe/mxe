diff -burN OTB-4.2.1.orig/CMake/ImportGdal.cmake OTB-4.2.1/CMake/ImportGdal.cmake
--- OTB-4.2.1.orig/CMake/ImportGdal.cmake	2014-10-24 11:54:04.394138417 +0530
+++ OTB-4.2.1/CMake/ImportGdal.cmake	2014-10-24 12:32:19.121184817 +0530
@@ -17,7 +17,7 @@
   message(STATUS "  GDAL includes : ${GDAL_INCLUDE_DIR}")
   message(STATUS "  GDAL library  : ${GDAL_LIBRARY}")
 
-  if(UNIX)
+  if(UNIX OR MINGW)
     if(NOT GDAL_CONFIG)
       message(FATAL_ERROR "Cannot find gdal-config. Set GDAL_CONFIG")
     endif()
@@ -227,6 +227,17 @@
   #  ${OTB_DATA_ROOT}/Input/MOD09Q1G_EVI.A2006233.h07v03.005.2008338190308.hdf  -> Test KO
   #  ${OTB_DATA_ROOT}/Input/GSSTF_NCEP.2b.2008.12.31.he5  -> Test OK
   #  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/example.hdf -> Test should be KO in some special cases
+
+    # Detect if gdal support hdf4 format
+    execute_process(COMMAND ${GDAL_CONFIG} --formats
+                    OUTPUT_VARIABLE GDAL_FORMATS
+                    OUTPUT_STRIP_TRAILING_WHITESPACE )
+    if( ${GDAL_FORMATS} MATCHES "hdf4" )
+      #we skip checking gdal hdf4 try_run and set CHECK_HDF4OPEN_SYMBOL=1
+      #Note: This cmake hack is only for cross compiling.. Need to be discussed with OTB upstream
+       set(CHECK_GDAL_BUILT_WITH_HDF 0 CACHE INTERNAL "GDAL_BUILT_WITH_HDF" FORCE)
+       set(CHECK_HDF4OPEN_SYMBOL 1)
+     else()
   if(CHECK_GDAL_BUILT_WITH_HDF)
     set(CMAKE_REQUIRED_INCLUDES ${GDAL_INCLUDE_DIR})
     set(CMAKE_REQUIRED_LIBRARIES "${GDAL_LIBRARY}")
@@ -239,6 +250,7 @@
       message(STATUS "CHECK_HDF4OPEN_SYMBOL test failed : your platform exhibits a problem to read HDF4 files. So the tests with HDF4 will be deactivated" )
     endif()
   endif()
+  endif()
 
 else()
 
diff -burN OTB-4.2.1.orig/CMakeLists.txt OTB-4.2.1/CMakeLists.txt
--- OTB-4.2.1.orig/CMakeLists.txt	2014-10-24 11:54:05.878157040 +0530
+++ OTB-4.2.1/CMakeLists.txt	2014-10-24 12:41:13.210315685 +0530
@@ -413,5 +413,6 @@
 set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${OTB_REQUIRED_LINK_FLAGS}")
 
 include(OTBCPack)
-include(GenerateConfigProperties)
+#skip running GenerateConfigProperties.exe in rcross compilation mode.
+#include(GenerateConfigProperties)
 
diff -burN OTB-4.2.1.orig/otb.conf OTB-4.2.1/otb.conf
--- OTB-4.2.1.orig/otb.conf	1970-01-01 05:30:00.000000000 +0530
+++ OTB-4.2.1/otb.conf	2014-10-24 12:37:46.115516694 +0530
@@ -0,0 +1,14 @@
+# Auto generated by config-properties 
+
+# Language for the GUI application based on otb
+# for example OTB_LANG=en_EN.UTF-8
+OTB_LANG=en_EN.UTF-8
+
+# Image size (in byte) to activate the streaming
+OTB_STREAM_IMAGE_SIZE_TO_ACTIVATE_STREAMING=128000000
+
+# Buffer size when the streaming is activated
+OTB_STREAM_MAX_SIZE_BUFFER_FOR_STREAMING=128000000
+
+#End of config file properties generation
+
diff -burN OTB-4.2.1.orig/TryRunResults.cmake OTB-4.2.1/TryRunResults.cmake
--- OTB-4.2.1.orig/TryRunResults.cmake	1970-01-01 05:30:00.000000000 +0530
+++ OTB-4.2.1/TryRunResults.cmake	2014-10-24 18:42:13.948063988 +0530
@@ -0,0 +1,6 @@
+SET( HAS_SSE2_EXTENSIONS_EXITCODE
+     "0"
+     CACHE STRING "Result from TRY_RUN" FORCE)
+SET( HAS_SSE_EXTENSIONS_EXITCODE
+     "0"
+     CACHE STRING "Result from TRY_RUN" FORCE)
\ No newline at end of file
diff -burN OTB-4.2.1.orig/TryRunResults_x86_64.cmake OTB-4.2.1/TryRunResults_x86_64.cmake
--- OTB-4.2.1.orig/TryRunResults_x86_64.cmake	1970-01-01 05:30:00.000000000 +0530
+++ OTB-4.2.1/TryRunResults_x86_64.cmake	2014-10-24 18:42:22.085184325 +0530
@@ -0,0 +1,9 @@
+SET( HAS_SSE2_EXTENSIONS_EXITCODE
+     "0"
+     CACHE STRING "Result from TRY_RUN" FORCE)
+SET( HAS_SSE_EXTENSIONS_EXITCODE
+     "0"
+     CACHE STRING "Result from TRY_RUN" FORCE)
+SET( IS_X86_64_EXITCODE
+     "0"
+     CACHE STRING "Result from TRY_RUN" FORCE)
diff -burN OTB-4.2.1.orig/Utilities/otbsiftfast/libsiftfast.cpp OTB-4.2.1/Utilities/otbsiftfast/libsiftfast.cpp
--- OTB-4.2.1.orig/Utilities/otbsiftfast/libsiftfast.cpp	2014-10-24 11:54:05.540152797 +0530
+++ OTB-4.2.1/Utilities/otbsiftfast/libsiftfast.cpp	2014-10-24 14:06:11.555639775 +0530
@@ -130,7 +130,9 @@
 
 inline u64 GetMicroTime()
 {
-#ifdef _WIN32
+//_TIMEVAL_DEFINED is defined in winsock2.h. so we check this instead of
+//_WIN32.(case for mingw).
+#ifndef _TIMEVAL_DEFINED
     LARGE_INTEGER count, freq;
     QueryPerformanceCounter(&count);
     QueryPerformanceFrequency(&freq);
