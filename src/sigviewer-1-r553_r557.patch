Index: src/src.pro
===================================================================
--- a/src/src.pro	(revision 553)
+++ b/src/src.pro	(revision 557)
@@ -36,6 +36,11 @@
     -lbiosig# \
     #-lGDF
 
+macx:INCLUDEPATH += /opt/local/include
+macx:LIBS += -L/opt/local/lib \
+             -lcholmod \
+             -lz
+
 RESOURCES = src.qrc
 win32:RC_FILE = src.rc
 ICON = sigviewer.icns
Index: src/version.txt
===================================================================
--- a/src/version.txt	(revision 553)
+++ b/src/version.txt	(revision 557)
@@ -1,2 +1,2 @@
-0.5.1
+0.5.2
 
Index: src/editing_commands/new_event_undo_command.h
===================================================================
--- a/src/editing_commands/new_event_undo_command.h	(revision 553)
+++ b/src/editing_commands/new_event_undo_command.h	(revision 557)
@@ -29,6 +29,8 @@
     /// deletes the event
     virtual void redo ();
 
+    //-------------------------------------------------------------------------
+    EventID getIDOfNewlyCreatedEvent () const {return created_signal_event_->getId();}
 
 private:
     QSharedPointer<EventManager> event_manager_;
Index: src/file_handling_impl/biosig_reader.cpp
===================================================================
--- a/src/file_handling_impl/biosig_reader.cpp	(revision 553)
+++ b/src/file_handling_impl/biosig_reader.cpp	(revision 557)
@@ -199,9 +199,11 @@
     }
 
     basic_header_->setNumberEvents(biosig_header_->EVENT.N);
-    if (biosig_header_->EVENT.SampleRate)
+
+    // Hack Hack: Transforming Events to have the same sample rate as the signals
+    /*if (biosig_header_->EVENT.SampleRate)
         basic_header_->setEventSamplerate(biosig_header_->EVENT.SampleRate);
-    else
+    else*/
         basic_header_->setEventSamplerate(biosig_header_->SampleRate);
 
 //#ifdef CHOLMOD_H
@@ -281,16 +283,18 @@
     unsigned number_events = biosig_header_->EVENT.N;
     for (unsigned index = 0; index < number_events; index++)
     {
-        QSharedPointer<SignalEvent> event (new SignalEvent (biosig_header_->EVENT.POS[index],
+        // Hack Hack: Transforming Events to have the same sample rate as the signals
+        double rate_transition = basic_header_->getEventSamplerate() / biosig_header_->EVENT.SampleRate;
+        QSharedPointer<SignalEvent> event (new SignalEvent (biosig_header_->EVENT.POS[index] * rate_transition,
                                                             biosig_header_->EVENT.TYP[index],
-                                                            biosig_header_->EVENT.SampleRate));
+                                                            biosig_header_->EVENT.SampleRate * rate_transition));
         if (biosig_header_->EVENT.CHN)
         {
             if (biosig_header_->EVENT.CHN[index] == 0)
                 event->setChannel (UNDEFINED_CHANNEL);
             else
                 event->setChannel (biosig_header_->EVENT.CHN[index] - 1);
-            event->setDuration (biosig_header_->EVENT.DUR[index]);
+            event->setDuration (biosig_header_->EVENT.DUR[index] * rate_transition);
         }
         events_.append (event);
     }
Index: src/gui_impl/signal_browser/signal_graphics_item.cpp
===================================================================
--- a/src/gui_impl/signal_browser/signal_graphics_item.cpp	(revision 553)
+++ b/src/gui_impl/signal_browser/signal_graphics_item.cpp	(revision 557)
@@ -422,6 +422,7 @@
         emit mouseMoving (false);
         NewEventUndoCommand* new_event_command = new NewEventUndoCommand (event_manager_, new_signal_event_, 1.0 / signal_view_settings_->getPixelsPerSample());
         command_executor_->executeCommand (new_event_command);
+        signal_browser_model_.selectEvent (new_event_command->getIDOfNewlyCreatedEvent());
     }
 
     shifting_ = false;
