This file is part of MXE.
See index.html for further information.

From 036e8f90ce7f2f1302a2603b89ae7661211c090d Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Fri, 21 Oct 2011 23:08:52 +0200
Subject: [PATCH 1/4] adjustments for mingw-cross-env


diff --git a/CMakeLists.txt b/CMakeLists.txt
index af8be68..61a5ee7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -400,6 +400,8 @@ message( STATUS "System: ${CMAKE_SYSTEM_NAME}" )
 #
 #--------------------------------------------------------------------------------------------------
 
+uniquely_add_flags( CXXFLAGS "-DBOOST_THREAD_USE_LIB;-DBoost_USE_STATIC_LIBS" )
+SET(CMAKE_CXX_FLAGS_RELEASE "-DBOOST_THREAD_USE_LIB -DBoost_USE_STATIC_LIBS -O3 -DNDEBUG" CACHE STRING blah FORCE)
 if( MSVC )
   
   uniquely_add_flags ( CGAL_CXX_FLAGS "-D_CRT_SECURE_NO_DEPRECATE;-D_SCL_SECURE_NO_DEPRECATE;-D_CRT_SECURE_NO_WARNINGS;-D_SCL_SECURE_NO_WARNINGS" )
diff --git a/TryRunResults.cgal.cmake b/TryRunResults.cgal.cmake
new file mode 100644
index 0000000..299de90
--- /dev/null
+++ b/TryRunResults.cgal.cmake
@@ -0,0 +1,198 @@
+SET( GCC_RUN_RES
+     0
+     CACHE STRING "version=4.7.0" FORCE)
+SET( GCC_RUN_RES__TRYRUN_OUTPUT
+     0
+     CACHE STRING "version=4.7.0" FORCE)
+SET( GMP_RUN_RES
+     0
+     CACHE STRING "version=5.0.2" FORCE)
+SET( GMP_RUN_RES__TRYRUN_OUTPUT
+     0
+     CACHE STRING "version=5.0.2" FORCE)
+SET( MPFR_RUN_RES
+     0
+     CACHE STRING "version=3.1.0" FORCE)
+SET( MPFR_RUN_RES__TRYRUN_OUTPUT
+     0
+     CACHE STRING "version=3.1.0" FORCE)
+SET( CGAL_CFG_ARRAY_MEMBER_INITIALIZATION_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_ARRAY_MEMBER_INITIALIZATION_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_DENORMALS_COMPILE_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_DENORMALS_COMPILE_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_FPU_ROUNDING_MODE_UNWINDING_VC_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_FPU_ROUNDING_MODE_UNWINDING_VC_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_IEEE_754_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_IEEE_754_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_ISTREAM_INT_BUG
+     0
+     CACHE STRING "7812" FORCE)
+SET( CGAL_CFG_ISTREAM_INT_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING "7812" FORCE)
+SET( CGAL_CFG_LONGNAME_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_LONGNAME_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_MATCHING_BUG_5
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_MATCHING_BUG_5__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_MATCHING_BUG_6
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_MATCHING_BUG_6__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NESTED_CLASS_FRIEND_DECLARATION_BUG
+     0
+     CACHE STRING "A's do_something\nC's do_something\nB's do_something\nC's do_something" FORCE)
+SET( CGAL_CFG_NESTED_CLASS_FRIEND_DECLARATION_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING "A's do_something\nC's do_something\nB's do_something\nC's do_something" FORCE)
+SET( CGAL_CFG_NO_CPP0X_DELETED_AND_DEFAULT_FUNCTIONS
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_DELETED_AND_DEFAULT_FUNCTIONS__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_ISFINITE
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_ISFINITE__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_LONG_LONG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_LONG_LONG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_DELEGATING_CONSTRUCTORS
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_CPP0X_DELEGATING_CONSTRUCTORS__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_LIMITS
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_LIMITS__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_LOGICAL_OPERATORS_ALTERNATIVES
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_LOGICAL_OPERATORS_ALTERNATIVES__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_MESSAGE_PRAGMA_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_MESSAGE_PRAGMA_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_NEXTAFTER
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_NEXTAFTER__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_STATEMENT_EXPRESSIONS
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_STATEMENT_EXPRESSIONS__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_STL
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_STL__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_TMPL_IN_TMPL_PARAM
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_TMPL_IN_TMPL_PARAM__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_TR1_ARRAY
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_TR1_ARRAY__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_TR1_TUPLE
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_TR1_TUPLE__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_WARNING_CPP_DIRECTIVE_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NO_WARNING_CPP_DIRECTIVE_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NUMERIC_LIMITS_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_NUMERIC_LIMITS_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_OUTOFLINE_MEMBER_DEFINITION_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_OUTOFLINE_MEMBER_DEFINITION_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_TEMPLATE_IN_DEFAULT_PARAMETER_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_TEMPLATE_IN_DEFAULT_PARAMETER_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_TYPENAME_BEFORE_DEFAULT_ARGUMENT_BUG
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_TYPENAME_BEFORE_DEFAULT_ARGUMENT_BUG__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_USING_BASE_MEMBER_BUG_2
+     0
+     CACHE STRING " " FORCE)
+SET( CGAL_CFG_USING_BASE_MEMBER_BUG_2__TRYRUN_OUTPUT
+     0
+     CACHE STRING " " FORCE)
+SET( ZLIB_RUN_RES
+     0
+     CACHE STRING "version=1.2.5" FORCE)
+SET( ZLIB_RUN_RES__TRYRUN_OUTPUT
+     0
+     CACHE STRING "version=1.2.5" FORCE)
+SET( QT4_RUN_RES
+     0
+     CACHE STRING "version=4.8.0" FORCE)
+SET( QT4_RUN_RES__TRYRUN_OUTPUT
+     0
+     CACHE STRING "version=4.8.0" FORCE)
diff --git a/cmake/modules/FindBoost.cmake b/cmake/modules/FindBoost.cmake
index fbdde88..5d8a0a9 100644
--- a/cmake/modules/FindBoost.cmake
+++ b/cmake/modules/FindBoost.cmake
@@ -167,6 +167,7 @@
 #
 
 include( CGAL_VersionUtils )
+set(Boost_USE_STATIC_LIBS   ON)
 
 
 #-------------------------------------------------------------------------------
@@ -706,7 +707,9 @@ ELSE (_boost_IN_CACHE)
     ENDIF( Boost_USE_STATIC_LIBS )
 
     # Find libraries (search in user defined directories first)
+    SET ( _boost_COMPILER "_win32")
     SET ( _boost_${UPPERCOMPONENT}_LIBRARY_RELEASE_NAMES   
+      ${Boost_LIB_PREFIX}boost_${COMPONENT}${_boost_COMPILER}${_boost_MULTITHREADED}
       ${Boost_LIB_PREFIX}boost_${COMPONENT}${_boost_COMPILER}${_boost_MULTITHREADED}-${Boost_LIB_VERSION}
       ${Boost_LIB_PREFIX}boost_${COMPONENT}${_boost_COMPILER}${_boost_MULTITHREADED}${_boost_STATIC_TAG}-${Boost_LIB_VERSION}
       ${Boost_LIB_PREFIX}boost_${COMPONENT}${_boost_MULTITHREADED}-${Boost_LIB_VERSION}
diff --git a/include/CGAL/Constrained_Delaunay_triangulation_2.h b/include/CGAL/Constrained_Delaunay_triangulation_2.h
index c89e7f7..57a5d40 100644
--- a/include/CGAL/Constrained_Delaunay_triangulation_2.h
+++ b/include/CGAL/Constrained_Delaunay_triangulation_2.h
@@ -390,7 +390,7 @@ is_flipable(Face_handle f, int i, bool perturb) const
   Face_handle ni = f->neighbor(i); 
   if (is_infinite(f) || is_infinite(ni)) return false; 
   if (f->is_constrained(i)) return false;
-  return (side_of_oriented_circle(ni, f->vertex(i)->point(), perturb) 
+  return (this->side_of_oriented_circle(ni, f->vertex(i)->point(), perturb)
                                         == ON_POSITIVE_SIDE);
 }
 
@@ -494,7 +494,7 @@ test_conflict(const Point& p, Face_handle fh) const
   // return true  if P is inside the circumcircle of fh
   // if fh is infinite, return true when p is in the positive
   // halfspace or on the boundary and in the  finite edge of fh
-  Oriented_side os = side_of_oriented_circle(fh,p,true);
+  Oriented_side os = this->side_of_oriented_circle(fh,p,true);
   if (os == ON_POSITIVE_SIDE) return true;
  
   if (os == ON_ORIENTED_BOUNDARY && is_infinite(fh)) {
-- 
1.7.10.4


From a455aa3d21f432831ccafcffc90bc7baf766ce6b Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Fri, 18 Nov 2011 00:08:25 +0100
Subject: [PATCH 2/4] prevent Qt's moc from choking on BOOST_JOIN

Taken from:
https://lists-sop.inria.fr/sympa/arc/cgal-discuss/2011-11/msg00087.html

diff --git a/cmake/modules/CGAL_Macros.cmake b/cmake/modules/CGAL_Macros.cmake
index 62d0485..852fcc9 100644
--- a/cmake/modules/CGAL_Macros.cmake
+++ b/cmake/modules/CGAL_Macros.cmake
@@ -174,9 +174,9 @@ if( NOT CGAL_MACROS_FILE_INCLUDED )
         if ( ${LIB}_RUN_RES EQUAL "0" )
         
           string( REGEX MATCH "version=.*\$" ${LIB}_VERSION_LINE ${${LIB}_OUTPUT}  )
-          string( REPLACE "\n" "" ${LIB}_VERSION_LINE2 ${${LIB}_VERSION_LINE} )
-          string( REPLACE "\r" "" ${LIB}_VERSION_LINE3 ${${LIB}_VERSION_LINE2} )
-          string( REPLACE "version=" "" ${LIB}_VERSION ${${LIB}_VERSION_LINE3} )
+          string( REPLACE "\n" "" "${LIB}_VERSION_LINE2" "${${LIB}_VERSION_LINE}" )
+          string( REPLACE "\r" "" "${LIB}_VERSION_LINE3" "${${LIB}_VERSION_LINE2}" )
+          string( REPLACE "version=" "" "${LIB}_VERSION" "${${LIB}_VERSION_LINE3}" )
           
         else()
         
-- 
1.7.10.4


From 7225ba1e69c3e4501706e73e2f1e61e3d1313bfa Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Fri, 6 Jul 2012 09:27:49 +0200
Subject: [PATCH 3/4] update "detected" Qt version


diff --git a/TryRunResults.cgal.cmake b/TryRunResults.cgal.cmake
index 299de90..f11ddc6 100644
--- a/TryRunResults.cgal.cmake
+++ b/TryRunResults.cgal.cmake
@@ -192,7 +192,7 @@ SET( ZLIB_RUN_RES__TRYRUN_OUTPUT
      CACHE STRING "version=1.2.5" FORCE)
 SET( QT4_RUN_RES
      0
-     CACHE STRING "version=4.8.0" FORCE)
+     CACHE STRING "version=4.8.2" FORCE)
 SET( QT4_RUN_RES__TRYRUN_OUTPUT
      0
-     CACHE STRING "version=4.8.0" FORCE)
+     CACHE STRING "version=4.8.2" FORCE)
-- 
1.7.10.4


From c6a34b69b8c538456fa23d07f2914aef6395bcf7 Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Wed, 18 Jul 2012 00:43:17 +0200
Subject: [PATCH 4/4] boost 1.50 compatibility


diff --git a/cmake/modules/CGAL_SetupBoost.cmake b/cmake/modules/CGAL_SetupBoost.cmake
index fc3dc11..d72074fd 100644
--- a/cmake/modules/CGAL_SetupBoost.cmake
+++ b/cmake/modules/CGAL_SetupBoost.cmake
@@ -3,7 +3,7 @@ if ( NOT CGAL_Boost_Setup )
   include(CGAL_TweakFindBoost)
   # In the documentation, we say we require Boost-1.39, but technically we
   # require 1.33.1. Some packages may require more recent versions, though.
-  find_package( Boost 1.33.1 REQUIRED thread )
+  find_package( Boost 1.33.1 REQUIRED thread system chrono )
   
   message( STATUS "Boost include:     ${Boost_INCLUDE_DIRS}" )
   message( STATUS "Boost libraries:   ${Boost_LIBRARIES}" )
-- 
1.7.10.4

